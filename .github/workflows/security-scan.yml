name: SafeShipper Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write  # For uploading SARIF results
      contents: read
      pull-requests: write    # For commenting on PRs
    
    strategy:
      matrix:
        scan-type: [static-analysis, dependency-scan, secrets-detection]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install security scanning tools
      run: |
        # Python security tools
        python -m pip install --upgrade pip
        pip install bandit safety semgrep checkov
        
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Install GitLeaks
        GITLEAKS_VERSION="8.18.0"
        wget "https://github.com/zricethezav/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
        tar -xzf "gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
        sudo mv gitleaks /usr/local/bin/
        
        # Install Snyk CLI
        npm install -g snyk
    
    - name: Install project dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r security_scanning/requirements.txt
    
    - name: Set environment variables
      run: |
        echo "SECURITY_ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}" >> $GITHUB_ENV
        echo "SCAN_TARGET=${{ github.workspace }}" >> $GITHUB_ENV
    
    # Static Analysis Scanning
    - name: Run Bandit security scan
      if: matrix.scan-type == 'static-analysis'
      run: |
        cd backend
        bandit -r . -f json -o ../bandit-report.json || true
        bandit -r . -f txt || true
    
    - name: Run Semgrep security scan
      if: matrix.scan-type == 'static-analysis'
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto . || true
    
    - name: Run CodeQL Analysis
      if: matrix.scan-type == 'static-analysis'
      uses: github/codeql-action/analyze@v2
      with:
        languages: python, javascript
        queries: security-and-quality
    
    # Dependency Vulnerability Scanning
    - name: Run Safety dependency scan
      if: matrix.scan-type == 'dependency-scan'
      run: |
        cd backend
        safety check --json --output ../safety-report.json || true
        safety check || true
    
    - name: Run Trivy filesystem scan
      if: matrix.scan-type == 'dependency-scan'
      run: |
        trivy fs --format json --output trivy-report.json . || true
        trivy fs . || true
    
    - name: Run Snyk dependency scan
      if: matrix.scan-type == 'dependency-scan'
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        cd backend
        snyk test --json --json-file-output=../snyk-report.json || true
        snyk test || true
      continue-on-error: true
    
    # Secrets Detection
    - name: Run GitLeaks secrets scan
      if: matrix.scan-type == 'secrets-detection'
      run: |
        gitleaks detect --report-format json --report-path gitleaks-report.json --source . || true
        gitleaks detect --source . || true
    
    - name: Run TruffleHog secrets scan
      if: matrix.scan-type == 'secrets-detection'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    # Infrastructure Security (for IaC files)
    - name: Run Checkov IaC scan
      if: matrix.scan-type == 'static-analysis'
      run: |
        checkov -d . --framework terraform,kubernetes,dockerfile --output json --output-file checkov-report.json || true
        checkov -d . --framework terraform,kubernetes,dockerfile || true
    
    # Aggregate and process results
    - name: Run SafeShipper security aggregation
      env:
        SECURITY_SLACK_WEBHOOK: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd backend
        python -m security_scanning.cli \
          --pipeline-type ci \
          --environment $SECURITY_ENVIRONMENT \
          --project-path .. \
          --generate-report \
          --output-dir ../security_reports \
          --sarif-output ../security-scan.sarif \
          --json-output > ../security-summary.json
    
    # Upload SARIF results to GitHub Security tab
    - name: Upload SARIF to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: security-scan.sarif
        category: safeshipper-security-scan
    
    # Upload security reports as artifacts
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.scan-type }}
        path: |
          security_reports/
          *-report.json
          security-summary.json
        retention-days: 30
    
    # Comment on PR with security results
    - name: Comment PR with security results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summaryPath = 'security-summary.json';
            if (fs.existsSync(summaryPath)) {
              const results = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              
              const scanTypeEmoji = {
                'static-analysis': 'üîç',
                'dependency-scan': 'üì¶',
                'secrets-detection': 'üîê'
              };
              
              const emoji = scanTypeEmoji['${{ matrix.scan-type }}'] || 'üîí';
              
              const comment = `## ${emoji} SafeShipper Security Scan Results - ${{ matrix.scan-type }}
              
              | Severity | Count |
              |----------|-------|
              | Critical | ${results.scan_summary?.severity_breakdown?.critical || 0} |
              | High     | ${results.scan_summary?.severity_breakdown?.high || 0} |
              | Medium   | ${results.scan_summary?.severity_breakdown?.medium || 0} |
              | Low      | ${results.scan_summary?.severity_breakdown?.low || 0} |
              
              **Pipeline Status:** ${results.pipeline_status?.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}
              **Compliance:** ${results.compliance_status === 'compliant' ? '‚úÖ COMPLIANT' : '‚ö†Ô∏è NON-COMPLIANT'}
              
              ${results.pipeline_status?.failed_checks?.length > 0 ? 
                '**Failed Checks:**\n' + results.pipeline_status.failed_checks.map(check => `- ${check}`).join('\n') : ''}
              
              ${results.recommendations?.length > 0 ? 
                '**Key Recommendations:**\n' + results.recommendations.slice(0, 3).map(rec => `- ${rec}`).join('\n') : ''}
              
              <details>
              <summary>View detailed scan results</summary>
              
              **Scanners Run:** ${Object.keys(results.scanner_results || {}).join(', ')}
              **Total Vulnerabilities:** ${results.scan_summary?.total_vulnerabilities || 0}
              **Environment:** ${results.pipeline_metadata?.environment || 'unknown'}
              
              </details>
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Error creating PR comment:', error);
          }
    
    # Fail the job if critical security issues found
    - name: Check security gate
      if: always()
      run: |
        if [ -f security-summary.json ]; then
          CRITICAL=$(jq -r '.scan_summary.severity_breakdown.critical // 0' security-summary.json)
          HIGH=$(jq -r '.scan_summary.severity_breakdown.high // 0' security-summary.json)
          PIPELINE_PASSED=$(jq -r '.pipeline_status.passed // false' security-summary.json)
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          echo "Pipeline passed: $PIPELINE_PASSED"
          
          if [ "$PIPELINE_PASSED" = "false" ]; then
            echo "‚ùå Security pipeline failed - check scan results"
            exit 1
          fi
          
          if [ "$CRITICAL" -gt 0 ] && [ "${{ env.SECURITY_ENVIRONMENT }}" = "production" ]; then
            echo "‚ùå Critical vulnerabilities found in production environment"
            exit 1
          fi
          
          if [ "$HIGH" -gt 5 ]; then
            echo "‚ö†Ô∏è High number of high-severity vulnerabilities detected"
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              exit 1
            fi
          fi
        fi
        
        echo "‚úÖ Security gate passed"

  # Container Security Scanning (separate job for Docker images)
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t safeshipper:${{ github.sha }} .
    
    - name: Run Trivy container scan
      run: |
        trivy image --format sarif --output container-scan.sarif safeshipper:${{ github.sha }}
        trivy image --severity HIGH,CRITICAL safeshipper:${{ github.sha }}
    
    - name: Upload container scan SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: container-scan.sarif
        category: container-security
    
    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-scan
        path: container-scan.sarif

  # Security notification job
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan, container-security]
    if: always() && (failure() || contains(needs.*.result, 'failure'))
    
    steps:
    - name: Send security alert
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          üö® SafeShipper Security Scan Failed
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
          
          Please check the security scan results and address any critical issues.
          
          View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK_URL != ''