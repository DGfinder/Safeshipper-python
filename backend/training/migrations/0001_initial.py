# Generated by Django 5.2.1 on 2025-07-14 11:15

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TrainingCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("is_mandatory", models.BooleanField(default=False)),
                ("renewal_period_months", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Training Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DriverCompetencyProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_status",
                    models.CharField(
                        choices=[
                            ("FULLY_QUALIFIED", "Fully Qualified"),
                            ("PARTIALLY_QUALIFIED", "Partially Qualified"),
                            ("NOT_QUALIFIED", "Not Qualified"),
                            ("EXPIRED_QUALIFICATIONS", "Expired Qualifications"),
                            ("PENDING_VERIFICATION", "Pending Verification"),
                        ],
                        default="PENDING_VERIFICATION",
                        max_length=25,
                    ),
                ),
                (
                    "qualified_hazard_classes",
                    models.JSONField(
                        default=list,
                        help_text="List of dangerous goods classes the driver is qualified for",
                    ),
                ),
                (
                    "years_experience",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Years of dangerous goods driving experience",
                        max_digits=4,
                        null=True,
                    ),
                ),
                (
                    "total_loads_transported",
                    models.IntegerField(
                        default=0,
                        help_text="Total number of dangerous goods loads transported",
                    ),
                ),
                (
                    "last_incident_date",
                    models.DateField(
                        blank=True,
                        help_text="Date of last safety incident (if any)",
                        null=True,
                    ),
                ),
                (
                    "last_assessment_date",
                    models.DateField(
                        blank=True,
                        help_text="Date of last competency assessment",
                        null=True,
                    ),
                ),
                (
                    "next_assessment_due",
                    models.DateField(
                        blank=True,
                        help_text="Next scheduled competency assessment",
                        null=True,
                    ),
                ),
                (
                    "assessment_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Last competency assessment score (percentage)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "medical_certificate_expiry",
                    models.DateField(
                        blank=True,
                        help_text="Commercial driver medical certificate expiry",
                        null=True,
                    ),
                ),
                (
                    "competency_notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about driver competency"
                    ),
                ),
                (
                    "restrictions",
                    models.JSONField(
                        default=list,
                        help_text="Specific restrictions on driver's dangerous goods transport",
                    ),
                ),
                (
                    "compliance_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Overall compliance percentage",
                        max_digits=5,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "driver",
                    models.OneToOneField(
                        limit_choices_to={"role": "DRIVER"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="competency_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Driver Competency Profile",
                "verbose_name_plural": "Driver Competency Profiles",
            },
        ),
        migrations.CreateModel(
            name="TrainingEnrollment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                        ],
                        default="enrolled",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("passed", models.BooleanField(default=False)),
                ("feedback", models.TextField(blank=True)),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-enrolled_at"],
            },
        ),
        migrations.CreateModel(
            name="TrainingProgram",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("online", "Online"),
                            ("classroom", "Classroom"),
                            ("hands_on", "Hands-on"),
                            ("blended", "Blended"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                ("duration_hours", models.DecimalField(decimal_places=2, max_digits=5)),
                ("learning_objectives", models.TextField()),
                ("content_outline", models.TextField()),
                ("materials_url", models.URLField(blank=True)),
                ("is_mandatory", models.BooleanField(default=False)),
                ("compliance_required", models.BooleanField(default=False)),
                (
                    "passing_score",
                    models.IntegerField(
                        default=80,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "certificate_validity_months",
                    models.IntegerField(blank=True, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training.trainingcategory",
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(blank=True, to="training.trainingprogram"),
                ),
            ],
            options={
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="ComplianceRequirement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("applicable_roles", models.JSONField(default=list)),
                ("applicable_departments", models.JSONField(default=list)),
                ("deadline_days", models.IntegerField(default=30)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "required_programs",
                    models.ManyToManyField(to="training.trainingprogram"),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TrainingRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("completed_at", models.DateTimeField()),
                (
                    "score",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("passed", models.BooleanField()),
                ("certificate_number", models.CharField(max_length=50, unique=True)),
                ("certificate_issued_at", models.DateTimeField(auto_now_add=True)),
                ("certificate_expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("valid", "Valid"),
                            ("expired", "Expired"),
                            ("expiring_soon", "Expiring Soon"),
                        ],
                        default="valid",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training.trainingenrollment",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training.trainingprogram",
                    ),
                ),
            ],
            options={
                "ordering": ["-completed_at"],
                "unique_together": {("employee", "program")},
            },
        ),
        migrations.CreateModel(
            name="TrainingSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_name", models.CharField(max_length=200)),
                ("scheduled_date", models.DateTimeField()),
                ("duration_hours", models.DecimalField(decimal_places=2, max_digits=5)),
                ("location", models.CharField(blank=True, max_length=200)),
                ("max_participants", models.IntegerField(default=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("session_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="instructed_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training.trainingprogram",
                    ),
                ),
            ],
            options={
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.AddField(
            model_name="trainingenrollment",
            name="session",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollments",
                to="training.trainingsession",
            ),
        ),
        migrations.CreateModel(
            name="ComplianceStatus",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("compliant", "Compliant"),
                            ("non_compliant", "Non-Compliant"),
                            ("pending", "Pending"),
                            ("overdue", "Overdue"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("due_date", models.DateField()),
                ("last_checked", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compliance_statuses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training.compliancerequirement",
                    ),
                ),
            ],
            options={
                "ordering": ["due_date"],
                "unique_together": {("employee", "requirement")},
            },
        ),
        migrations.CreateModel(
            name="DriverLicense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "license_number",
                    models.CharField(
                        help_text="Driver license number", max_length=20, unique=True
                    ),
                ),
                (
                    "license_class",
                    models.CharField(
                        choices=[
                            ("C", "Class C (Car)"),
                            ("LR", "Class LR (Light Rigid)"),
                            ("MR", "Class MR (Medium Rigid)"),
                            ("HR", "Class HR (Heavy Rigid)"),
                            ("HC", "Class HC (Heavy Combination)"),
                            ("MC", "Class MC (Multi-Combination)"),
                        ],
                        help_text="Australian driver license class",
                        max_length=5,
                    ),
                ),
                (
                    "state_issued",
                    models.CharField(
                        choices=[
                            ("NSW", "New South Wales"),
                            ("VIC", "Victoria"),
                            ("QLD", "Queensland"),
                            ("WA", "Western Australia"),
                            ("SA", "South Australia"),
                            ("TAS", "Tasmania"),
                            ("ACT", "Australian Capital Territory"),
                            ("NT", "Northern Territory"),
                        ],
                        help_text="State/territory where license was issued",
                        max_length=10,
                    ),
                ),
                ("issue_date", models.DateField(help_text="License issue date")),
                ("expiry_date", models.DateField(help_text="License expiry date")),
                (
                    "endorsements",
                    models.JSONField(
                        default=list,
                        help_text="Special endorsements (e.g., F - Forklift, V - Vehicles for hire)",
                    ),
                ),
                (
                    "restrictions",
                    models.JSONField(
                        default=list, help_text="License restrictions or conditions"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("VALID", "Valid"),
                            ("EXPIRED", "Expired"),
                            ("SUSPENDED", "Suspended"),
                            ("CANCELLED", "Cancelled"),
                            ("EXPIRING_SOON", "Expiring Soon"),
                        ],
                        default="VALID",
                        max_length=15,
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "driver",
                    models.ForeignKey(
                        limit_choices_to={"role": "DRIVER"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="driver_licenses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_licenses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Driver License",
                "verbose_name_plural": "Driver Licenses",
                "indexes": [
                    models.Index(
                        fields=["driver", "license_class"],
                        name="training_dr_driver__e6917e_idx",
                    ),
                    models.Index(
                        fields=["expiry_date"], name="training_dr_expiry__dac339_idx"
                    ),
                    models.Index(
                        fields=["status"], name="training_dr_status_6d9faa_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ADGDriverCertificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "certificate_type",
                    models.CharField(
                        choices=[
                            ("BASIC_ADG", "Basic ADG Training"),
                            ("LOAD_RESTRAINT", "Load Restraint"),
                            ("SECURITY_AWARENESS", "Security Awareness"),
                            ("VEHICLE_MAINTENANCE", "Vehicle Maintenance for DG"),
                            ("EMERGENCY_RESPONSE", "Emergency Response"),
                            ("CLASS_SPECIFIC", "Class-Specific Training"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "certificate_number",
                    models.CharField(
                        help_text="ADG certificate number", max_length=30, unique=True
                    ),
                ),
                (
                    "issuing_authority",
                    models.CharField(
                        help_text="Training provider or authority that issued the certificate",
                        max_length=100,
                    ),
                ),
                ("issue_date", models.DateField()),
                ("expiry_date", models.DateField()),
                (
                    "hazard_classes_covered",
                    models.JSONField(
                        default=list,
                        help_text="List of dangerous goods classes covered by this certificate",
                    ),
                ),
                (
                    "competency_areas",
                    models.JSONField(
                        default=list,
                        help_text="Specific competency areas (e.g., packaging, loading, documentation)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("VALID", "Valid"),
                            ("EXPIRED", "Expired"),
                            ("EXPIRING_SOON", "Expiring Soon"),
                            ("SUSPENDED", "Suspended"),
                            ("REVOKED", "Revoked"),
                        ],
                        default="VALID",
                        max_length=15,
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificate_file",
                    models.FileField(
                        blank=True,
                        help_text="Scanned copy of the certificate",
                        null=True,
                        upload_to="adg_certificates/",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "driver",
                    models.ForeignKey(
                        limit_choices_to={"role": "DRIVER"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adg_certificates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_adg_certificates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "training_program",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated training program if completed internally",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="training.trainingprogram",
                    ),
                ),
                (
                    "training_record",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated training record if completed internally",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="training.trainingrecord",
                    ),
                ),
            ],
            options={
                "verbose_name": "ADG Driver Certificate",
                "verbose_name_plural": "ADG Driver Certificates",
                "indexes": [
                    models.Index(
                        fields=["driver", "certificate_type"],
                        name="training_ad_driver__994ea9_idx",
                    ),
                    models.Index(
                        fields=["expiry_date"], name="training_ad_expiry__17cfdf_idx"
                    ),
                    models.Index(
                        fields=["status"], name="training_ad_status_7abd4f_idx"
                    ),
                ],
                "unique_together": {
                    ("driver", "certificate_type", "certificate_number")
                },
            },
        ),
        migrations.AlterUniqueTogether(
            name="trainingenrollment",
            unique_together={("employee", "session")},
        ),
    ]
