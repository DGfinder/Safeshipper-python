# Generated by Django 5.2.1 on 2025-07-13 09:04

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("dangerous_goods", "0003_alter_dangerousgood_options_historicaldangerousgood"),
        ("shipments", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PlacardTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("CLASS_DIAMOND", "Class Diamond Placard"),
                            ("EMERGENCY_INFO_PANEL", "Emergency Information Panel"),
                            ("LIMITED_QUANTITY", "Limited Quantity Placard"),
                            ("MARINE_POLLUTANT", "Marine Pollutant Placard"),
                            ("ORIENTATION_ARROW", "Orientation Arrow"),
                        ],
                        max_length=30,
                        unique=True,
                        verbose_name="Template Type",
                    ),
                ),
                (
                    "template_name",
                    models.CharField(max_length=100, verbose_name="Template Name"),
                ),
                (
                    "width_mm",
                    models.PositiveIntegerField(
                        default=250,
                        help_text="Placard width in millimeters",
                        verbose_name="Width (mm)",
                    ),
                ),
                (
                    "height_mm",
                    models.PositiveIntegerField(
                        default=250,
                        help_text="Placard height in millimeters",
                        verbose_name="Height (mm)",
                    ),
                ),
                (
                    "border_width_mm",
                    models.FloatField(
                        default=12.5,
                        help_text="Border width per ADG requirements",
                        verbose_name="Border Width (mm)",
                    ),
                ),
                (
                    "design_config",
                    models.JSONField(
                        default=dict,
                        help_text="JSON configuration for placard design elements",
                        verbose_name="Design Configuration",
                    ),
                ),
                (
                    "svg_template",
                    models.TextField(
                        blank=True,
                        help_text="SVG template with placeholders for dynamic content",
                        verbose_name="SVG Template",
                    ),
                ),
                (
                    "css_styles",
                    models.TextField(
                        blank=True,
                        help_text="CSS styles for placard rendering",
                        verbose_name="CSS Styles",
                    ),
                ),
                (
                    "adg_compliant",
                    models.BooleanField(
                        default=True,
                        help_text="Meets ADG Code requirements",
                        verbose_name="ADG Compliant",
                    ),
                ),
                (
                    "regulatory_reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference to ADG Code section",
                        max_length=200,
                        verbose_name="Regulatory Reference",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Placard Template",
                "verbose_name_plural": "Placard Templates",
                "ordering": ["template_type", "template_name"],
            },
        ),
        migrations.CreateModel(
            name="ADGPlacardRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "placard_type",
                    models.CharField(
                        choices=[
                            ("STANDARD_DG", "Standard Dangerous Goods"),
                            (
                                "FLAMMABLE_CLASS_2_1",
                                "Class 2.1 Flammable Gas (Excluding Aerosols)",
                            ),
                            ("LARGE_RECEPTACLE", "Receptacles > 500kg/L"),
                            ("LIMITED_QUANTITY", "Limited Quantities"),
                            ("DOMESTIC_CONSUMABLE", "Domestic Consumables"),
                        ],
                        db_index=True,
                        max_length=30,
                        verbose_name="Placard Type",
                    ),
                ),
                (
                    "hazard_class",
                    models.CharField(
                        blank=True,
                        help_text="Specific hazard class this rule applies to, or blank for general rules",
                        max_length=20,
                        null=True,
                        verbose_name="Hazard Class",
                    ),
                ),
                (
                    "threshold_quantity",
                    models.FloatField(
                        help_text="Minimum quantity requiring placarding",
                        verbose_name="Threshold Quantity",
                    ),
                ),
                (
                    "quantity_type",
                    models.CharField(
                        choices=[
                            ("WEIGHT_KG", "Weight (kg)"),
                            ("VOLUME_L", "Volume (L)"),
                            ("WEIGHT_OR_VOLUME", "Weight (kg) or Volume (L)"),
                        ],
                        default="WEIGHT_OR_VOLUME",
                        max_length=20,
                        verbose_name="Quantity Type",
                    ),
                ),
                (
                    "is_individual_receptacle",
                    models.BooleanField(
                        default=False,
                        help_text="True if this threshold applies to individual receptacles, False for aggregate quantities",
                        verbose_name="Individual Receptacle",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Human-readable description of this placard rule",
                        verbose_name="Rule Description",
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Priority for rule evaluation (lower = higher priority)",
                        verbose_name="Priority",
                    ),
                ),
                (
                    "regulatory_reference",
                    models.CharField(
                        default="ADG Code 7.9",
                        help_text="Reference to specific regulation or table",
                        max_length=100,
                        verbose_name="Regulatory Reference",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "ADG Placard Rule",
                "verbose_name_plural": "ADG Placard Rules",
                "ordering": ["priority", "placard_type", "hazard_class"],
                "indexes": [
                    models.Index(
                        fields=["placard_type", "hazard_class"],
                        name="dangerous_g_placard_54e317_idx",
                    ),
                    models.Index(
                        fields=["priority", "is_active"],
                        name="dangerous_g_priorit_dae336_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmergencyContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("COMPANY_EMERGENCY", "Company Emergency Contact"),
                            (
                                "CHEMTREC",
                                "CHEMTREC (Chemical Transportation Emergency Center)",
                            ),
                            ("FIRE_RESCUE", "Fire & Rescue Service"),
                            ("POLICE", "Police"),
                            ("POISON_CONTROL", "Poison Control Center"),
                            ("TRANSPORT_EMERGENCY", "Transport Emergency Service"),
                            ("REGIONAL_AUTHORITY", "Regional Emergency Authority"),
                        ],
                        max_length=25,
                        verbose_name="Contact Type",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(max_length=200, verbose_name="Organization Name"),
                ),
                (
                    "contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Specific person or department name",
                        max_length=200,
                        verbose_name="Contact Person",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        help_text="24/7 emergency phone number",
                        max_length=50,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "alternative_phone",
                    models.CharField(
                        blank=True,
                        help_text="Backup emergency phone number",
                        max_length=50,
                        verbose_name="Alternative Phone",
                    ),
                ),
                (
                    "coverage_area",
                    models.CharField(
                        blank=True,
                        help_text="Geographic area this contact covers (e.g., 'Australia', 'NSW', 'Sydney Metro')",
                        max_length=200,
                        verbose_name="Coverage Area",
                    ),
                ),
                (
                    "hazard_classes_covered",
                    models.JSONField(
                        default=list,
                        help_text="List of hazard classes this contact specializes in",
                        verbose_name="Hazard Classes Covered",
                    ),
                ),
                (
                    "is_24_7_available",
                    models.BooleanField(
                        default=True,
                        help_text="Available 24 hours, 7 days a week",
                        verbose_name="24/7 Available",
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Priority for automatic selection (lower = higher priority)",
                        verbose_name="Priority",
                    ),
                ),
                (
                    "language_support",
                    models.CharField(
                        default="English",
                        help_text="Languages supported by this emergency contact",
                        max_length=200,
                        verbose_name="Language Support",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about this emergency contact",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Emergency Contact",
                "verbose_name_plural": "Emergency Contacts",
                "ordering": ["priority", "contact_type", "organization_name"],
                "indexes": [
                    models.Index(
                        fields=["contact_type", "is_active"],
                        name="dangerous_g_contact_f48b18_idx",
                    ),
                    models.Index(
                        fields=["priority", "is_active"],
                        name="dangerous_g_priorit_5f0733_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PlacardRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "placard_status",
                    models.CharField(
                        choices=[
                            ("REQUIRED", "Placard Required"),
                            ("NOT_REQUIRED", "Placard Not Required"),
                            ("REVIEW_REQUIRED", "Manual Review Required"),
                        ],
                        default="NOT_REQUIRED",
                        max_length=20,
                        verbose_name="Placard Status",
                    ),
                ),
                (
                    "required_placard_types",
                    models.JSONField(
                        default=list,
                        help_text="List of placard types required for this shipment",
                        verbose_name="Required Placard Types",
                    ),
                ),
                (
                    "total_dg_weight_kg",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Total DG Weight (kg)"
                    ),
                ),
                (
                    "total_dg_volume_l",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Total DG Volume (L)"
                    ),
                ),
                (
                    "total_lq_weight_kg",
                    models.FloatField(
                        blank=True,
                        help_text="Total limited quantity dangerous goods weight",
                        null=True,
                        verbose_name="Total LQ Weight (kg)",
                    ),
                ),
                (
                    "combined_quantity_kg",
                    models.FloatField(
                        blank=True,
                        help_text="Combined quantity = DG + (LQ * 0.1)",
                        null=True,
                        verbose_name="Combined Quantity (kg)",
                    ),
                ),
                (
                    "has_large_receptacles",
                    models.BooleanField(
                        default=False,
                        help_text="True if any receptacle exceeds 500kg/L",
                        verbose_name="Has Large Receptacles",
                    ),
                ),
                (
                    "class_2_1_quantity_kg",
                    models.FloatField(
                        blank=True,
                        help_text="Total Class 2.1 flammable gas quantity (excluding aerosols)",
                        null=True,
                        verbose_name="Class 2.1 Quantity (kg)",
                    ),
                ),
                (
                    "calculation_details",
                    models.JSONField(
                        default=dict,
                        help_text="Detailed breakdown of placard calculations",
                        verbose_name="Calculation Details",
                    ),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from manual review if required",
                        verbose_name="Review Notes",
                    ),
                ),
                (
                    "calculated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Calculated At"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "calculated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="calculated_placard_requirements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shipment",
                    models.OneToOneField(
                        help_text="Shipment this placard requirement applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="placard_requirement",
                        to="shipments.shipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Placard Requirement",
                "verbose_name_plural": "Placard Requirements",
                "ordering": ["-calculated_at"],
            },
        ),
        migrations.CreateModel(
            name="PlacardCalculationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rule_triggered",
                    models.BooleanField(
                        help_text="Whether this rule triggered a placard requirement",
                        verbose_name="Rule Triggered",
                    ),
                ),
                (
                    "measured_quantity",
                    models.FloatField(
                        help_text="The quantity that was measured against the rule threshold",
                        verbose_name="Measured Quantity",
                    ),
                ),
                (
                    "threshold_quantity",
                    models.FloatField(
                        help_text="The threshold quantity from the rule",
                        verbose_name="Threshold Quantity",
                    ),
                ),
                (
                    "calculation_notes",
                    models.TextField(
                        help_text="Detailed notes about this calculation step",
                        verbose_name="Calculation Notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "rule_applied",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dangerous_goods.adgplacardrule",
                    ),
                ),
                (
                    "placard_requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calculation_logs",
                        to="dangerous_goods.placardrequirement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Placard Calculation Log",
                "verbose_name_plural": "Placard Calculation Logs",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="DigitalPlacard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "placard_type",
                    models.CharField(
                        choices=[
                            ("CLASS_DIAMOND", "Class Diamond Placard"),
                            ("EMERGENCY_INFO_PANEL", "Emergency Information Panel"),
                            ("LIMITED_QUANTITY", "Limited Quantity Placard"),
                            ("FUMIGATED_UNIT", "Fumigated Unit Placard"),
                            ("MARINE_POLLUTANT", "Marine Pollutant Placard"),
                        ],
                        max_length=30,
                        verbose_name="Placard Type",
                    ),
                ),
                (
                    "placard_size",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard (250mm x 250mm)"),
                            ("LARGE", "Large (300mm x 300mm)"),
                            ("SMALL", "Small (200mm x 200mm)"),
                        ],
                        default="STANDARD",
                        max_length=15,
                        verbose_name="Placard Size",
                    ),
                ),
                (
                    "placard_id",
                    models.CharField(
                        help_text="Unique identifier for this placard",
                        max_length=50,
                        unique=True,
                        verbose_name="Placard ID",
                    ),
                ),
                (
                    "qr_code_data",
                    models.TextField(
                        help_text="JSON data encoded in QR code for verification",
                        verbose_name="QR Code Data",
                    ),
                ),
                (
                    "qr_code_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to generated QR code image",
                        verbose_name="QR Code Image URL",
                    ),
                ),
                (
                    "placard_image_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to generated placard image",
                        verbose_name="Placard Image URL",
                    ),
                ),
                (
                    "placard_pdf_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to printable placard PDF",
                        verbose_name="Placard PDF URL",
                    ),
                ),
                (
                    "placement_location",
                    models.CharField(
                        blank=True,
                        help_text="Where on vehicle this placard should be placed (front, rear, sides)",
                        max_length=50,
                        verbose_name="Placement Location",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("EXPIRED", "Expired"),
                            ("SUPERSEDED", "Superseded"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="ACTIVE",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(auto_now_add=True, verbose_name="Valid From"),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Expiry date for this placard",
                        null=True,
                        verbose_name="Valid Until",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dangerous_goods",
                    models.ManyToManyField(
                        help_text="Dangerous goods covered by this placard",
                        related_name="digital_placards",
                        to="dangerous_goods.dangerousgood",
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_placards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "placard_requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="digital_placards",
                        to="dangerous_goods.placardrequirement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Digital Placard",
                "verbose_name_plural": "Digital Placards",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PlacardVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "verification_type",
                    models.CharField(
                        choices=[
                            ("QR_SCAN", "QR Code Scan"),
                            ("MANUAL_CHECK", "Manual Visual Check"),
                            ("PHOTO_VERIFICATION", "Photo Verification"),
                            ("GPS_VERIFICATION", "GPS Location Verification"),
                        ],
                        default="QR_SCAN",
                        max_length=20,
                        verbose_name="Verification Type",
                    ),
                ),
                (
                    "verification_result",
                    models.CharField(
                        choices=[
                            ("VALID", "Valid"),
                            ("EXPIRED", "Expired"),
                            ("INVALID", "Invalid"),
                            ("MISSING", "Missing"),
                            ("DAMAGED", "Damaged"),
                            ("INCORRECT", "Incorrect Type"),
                        ],
                        max_length=15,
                        verbose_name="Verification Result",
                    ),
                ),
                (
                    "verification_location",
                    models.CharField(
                        blank=True,
                        help_text="GPS coordinates or address where verification occurred",
                        max_length=255,
                        verbose_name="Verification Location",
                    ),
                ),
                (
                    "vehicle_registration",
                    models.CharField(
                        blank=True,
                        help_text="Registration of vehicle being verified",
                        max_length=50,
                        verbose_name="Vehicle Registration",
                    ),
                ),
                (
                    "scanned_data",
                    models.TextField(
                        blank=True,
                        help_text="Raw data from QR code scan",
                        verbose_name="Scanned QR Data",
                    ),
                ),
                (
                    "verification_photo_url",
                    models.URLField(
                        blank=True,
                        help_text="Photo evidence of placard placement",
                        verbose_name="Verification Photo URL",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the verification",
                        verbose_name="Verification Notes",
                    ),
                ),
                ("verified_at", models.DateTimeField(auto_now_add=True)),
                (
                    "digital_placard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verifications",
                        to="dangerous_goods.digitalplacard",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="placard_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Placard Verification",
                "verbose_name_plural": "Placard Verifications",
                "ordering": ["-verified_at"],
            },
        ),
        migrations.CreateModel(
            name="TransportDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("DG_DECLARATION", "Dangerous Goods Declaration"),
                            ("MULTIMODAL_DG_FORM", "Multimodal Dangerous Goods Form"),
                            ("TRANSPORT_DOCUMENT", "Transport Document"),
                            ("CONSIGNMENT_NOTE", "Consignment Note"),
                            (
                                "PACKING_CERTIFICATE",
                                "Dangerous Goods Packing Certificate",
                            ),
                        ],
                        max_length=25,
                        verbose_name="Document Type",
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        help_text="Unique document identification number",
                        max_length=100,
                        unique=True,
                        verbose_name="Document Number",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING_APPROVAL", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("ISSUED", "Issued"),
                            ("SUPERSEDED", "Superseded"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="DRAFT",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "consignor_name",
                    models.CharField(
                        help_text="Name of consignor as per ADG Part 11",
                        max_length=200,
                        verbose_name="Consignor Name",
                    ),
                ),
                (
                    "consignor_address",
                    models.TextField(
                        help_text="Full address of consignor",
                        verbose_name="Consignor Address",
                    ),
                ),
                (
                    "consignor_phone",
                    models.CharField(
                        help_text="Consignor telephone number as required by ADG Part 11",
                        max_length=50,
                        verbose_name="Consignor Telephone",
                    ),
                ),
                (
                    "consignee_name",
                    models.CharField(
                        help_text="Name of consignee",
                        max_length=200,
                        verbose_name="Consignee Name",
                    ),
                ),
                (
                    "consignee_address",
                    models.TextField(
                        help_text="Full address of consignee",
                        verbose_name="Consignee Address",
                    ),
                ),
                (
                    "transport_mode",
                    models.CharField(
                        help_text="Road, Rail, Multimodal, etc.",
                        max_length=50,
                        verbose_name="Mode of Transport",
                    ),
                ),
                (
                    "vehicle_registration",
                    models.CharField(
                        blank=True,
                        help_text="Registration of transport vehicle",
                        max_length=50,
                        verbose_name="Vehicle Registration",
                    ),
                ),
                (
                    "driver_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of driver",
                        max_length=200,
                        verbose_name="Driver Name",
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        help_text="24-hour emergency contact organization",
                        max_length=200,
                        verbose_name="Emergency Contact Name",
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        help_text="24-hour emergency telephone number",
                        max_length=50,
                        verbose_name="Emergency Contact Phone",
                    ),
                ),
                (
                    "document_content",
                    models.JSONField(
                        default=dict,
                        help_text="Structured document content and data",
                        verbose_name="Document Content",
                    ),
                ),
                (
                    "pdf_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to generated PDF document",
                        verbose_name="PDF Document URL",
                    ),
                ),
                (
                    "xml_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to generated XML document for electronic data interchange",
                        verbose_name="XML Document URL",
                    ),
                ),
                (
                    "adg_compliant",
                    models.BooleanField(
                        default=False,
                        help_text="Document meets ADG Code Part 11 requirements",
                        verbose_name="ADG Compliant",
                    ),
                ),
                (
                    "validation_errors",
                    models.JSONField(
                        default=list,
                        help_text="List of validation errors if any",
                        verbose_name="Validation Errors",
                    ),
                ),
                (
                    "consignor_signature_url",
                    models.URLField(
                        blank=True,
                        help_text="Digital signature of consignor",
                        verbose_name="Consignor Signature URL",
                    ),
                ),
                (
                    "carrier_signature_url",
                    models.URLField(
                        blank=True,
                        help_text="Digital signature of carrier",
                        verbose_name="Carrier Signature URL",
                    ),
                ),
                (
                    "document_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date of document preparation",
                        verbose_name="Document Date",
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Document expiry date if applicable",
                        null=True,
                        verbose_name="Valid Until",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approved At"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_transport_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_transport_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transport_documents",
                        to="shipments.shipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transport Document",
                "verbose_name_plural": "Transport Documents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChemicalReactivityProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reactivity_type",
                    models.CharField(
                        choices=[
                            ("STRONG_ACID", "Strong Acid"),
                            ("MODERATE_ACID", "Moderate Acid"),
                            ("WEAK_ACID", "Weak Acid"),
                            ("STRONG_ALKALI", "Strong Alkali"),
                            ("MODERATE_ALKALI", "Moderate Alkali"),
                            ("WEAK_ALKALI", "Weak Alkali"),
                            ("OXIDIZER", "Oxidizing Agent"),
                            ("REDUCER", "Reducing Agent"),
                            ("NEUTRAL", "Neutral/Non-reactive"),
                        ],
                        db_index=True,
                        help_text="Primary chemical reactivity classification",
                        max_length=20,
                        verbose_name="Reactivity Type",
                    ),
                ),
                (
                    "strength_level",
                    models.CharField(
                        choices=[
                            ("VERY_STRONG", "Very Strong (pH < 1 or pH > 13)"),
                            ("STRONG", "Strong (pH 1-2 or pH 12-13)"),
                            ("MODERATE", "Moderate (pH 2-4 or pH 10-12)"),
                            ("WEAK", "Weak (pH 4-6 or pH 8-10)"),
                            ("NEUTRAL", "Neutral (pH 6-8)"),
                        ],
                        help_text="Relative strength of the chemical reactivity",
                        max_length=15,
                        verbose_name="Strength Level",
                    ),
                ),
                (
                    "typical_ph_min",
                    models.FloatField(
                        blank=True,
                        help_text="Typical minimum pH for this material type",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(14.0),
                        ],
                        verbose_name="Typical pH (Minimum)",
                    ),
                ),
                (
                    "typical_ph_max",
                    models.FloatField(
                        blank=True,
                        help_text="Typical maximum pH for this material type",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(14.0),
                        ],
                        verbose_name="Typical pH (Maximum)",
                    ),
                ),
                (
                    "incompatible_with",
                    models.JSONField(
                        default=list,
                        help_text="List of reactivity types this material is incompatible with",
                        verbose_name="Incompatible Material Types",
                    ),
                ),
                (
                    "min_segregation_distance",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Recommended minimum segregation distance for incompatible materials",
                        null=True,
                        verbose_name="Minimum Segregation Distance (meters)",
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("IATA_LIST", "IATA Dangerous Goods List"),
                            ("REGULATORY_TABLE", "Regulatory Segregation Table"),
                            ("CHEMICAL_DATABASE", "Chemical Property Database"),
                            ("EXPERT_KNOWLEDGE", "Expert Chemical Knowledge"),
                            ("MANUAL_ENTRY", "Manual Entry"),
                        ],
                        default="REGULATORY_TABLE",
                        help_text="Source of this reactivity classification",
                        max_length=25,
                        verbose_name="Data Source",
                    ),
                ),
                (
                    "confidence_level",
                    models.FloatField(
                        default=1.0,
                        help_text="Confidence in this classification (0.0-1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Confidence Level",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about this material's reactivity",
                        verbose_name="Additional Notes",
                    ),
                ),
                (
                    "regulatory_basis",
                    models.CharField(
                        blank=True,
                        help_text="Regulatory standard or document this classification is based on",
                        max_length=200,
                        verbose_name="Regulatory Basis",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_reactivity_profiles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dangerous_good",
                    models.OneToOneField(
                        help_text="Dangerous good this profile applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactivity_profile",
                        to="dangerous_goods.dangerousgood",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chemical Reactivity Profile",
                "verbose_name_plural": "Chemical Reactivity Profiles",
                "ordering": ["dangerous_good__un_number", "reactivity_type"],
                "indexes": [
                    models.Index(
                        fields=["reactivity_type", "strength_level"],
                        name="dangerous_g_reactiv_637ad3_idx",
                    ),
                    models.Index(
                        fields=["dangerous_good", "reactivity_type"],
                        name="dangerous_g_dangero_fc0c57_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmergencyProcedure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hazard_class",
                    models.CharField(
                        blank=True,
                        help_text="Hazard class this procedure applies to (if not specific to one DG)",
                        max_length=20,
                        verbose_name="Hazard Class",
                    ),
                ),
                (
                    "procedure_type",
                    models.CharField(
                        choices=[
                            ("IMMEDIATE_ACTION", "Immediate Actions"),
                            ("FIRE_RESPONSE", "Fire Response"),
                            ("SPILL_RESPONSE", "Spill Response"),
                            ("EXPOSURE_RESPONSE", "Exposure Response"),
                            ("EVACUATION", "Evacuation Procedures"),
                            ("MEDICAL_RESPONSE", "Medical Response"),
                            ("CONTAINMENT", "Containment Procedures"),
                        ],
                        max_length=25,
                        verbose_name="Procedure Type",
                    ),
                ),
                (
                    "procedure_title",
                    models.CharField(max_length=200, verbose_name="Procedure Title"),
                ),
                (
                    "immediate_actions",
                    models.JSONField(
                        default=list,
                        help_text="List of immediate actions to take",
                        verbose_name="Immediate Actions",
                    ),
                ),
                (
                    "detailed_steps",
                    models.JSONField(
                        default=list,
                        help_text="Detailed step-by-step procedures",
                        verbose_name="Detailed Steps",
                    ),
                ),
                (
                    "ppe_requirements",
                    models.JSONField(
                        default=list,
                        help_text="Personal protective equipment required",
                        verbose_name="PPE Requirements",
                    ),
                ),
                (
                    "isolation_distances",
                    models.JSONField(
                        default=dict,
                        help_text="Isolation and evacuation distances for different scenarios",
                        verbose_name="Isolation Distances",
                    ),
                ),
                (
                    "first_aid_measures",
                    models.JSONField(
                        default=list,
                        help_text="Basic first aid procedures",
                        verbose_name="First Aid Measures",
                    ),
                ),
                (
                    "special_precautions",
                    models.JSONField(
                        default=list,
                        help_text="Special precautions and warnings",
                        verbose_name="Special Precautions",
                    ),
                ),
                (
                    "regulatory_basis",
                    models.CharField(
                        blank=True,
                        help_text="Reference to Emergency Response Guidebook or other authority",
                        max_length=200,
                        verbose_name="Regulatory Basis",
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Priority for display in EIP (lower = higher priority)",
                        verbose_name="Priority",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dangerous_good",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific dangerous good this procedure applies to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emergency_procedures",
                        to="dangerous_goods.dangerousgood",
                    ),
                ),
            ],
            options={
                "verbose_name": "Emergency Procedure",
                "verbose_name_plural": "Emergency Procedures",
                "ordering": ["priority", "procedure_type"],
                "indexes": [
                    models.Index(
                        fields=["dangerous_good", "procedure_type"],
                        name="dangerous_g_dangero_d3f94e_idx",
                    ),
                    models.Index(
                        fields=["hazard_class", "procedure_type"],
                        name="dangerous_g_hazard__e32c61_idx",
                    ),
                    models.Index(
                        fields=["priority", "is_active"],
                        name="dangerous_g_priorit_924440_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="LimitedQuantityLimit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "max_quantity_inner_package",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Maximum quantity per inner packaging (kg for solids, L for liquids, kg for gases)",
                        max_digits=10,
                        null=True,
                        verbose_name="Max Quantity per Inner Package",
                    ),
                ),
                (
                    "max_quantity_package",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Maximum gross mass per package (30kg default)",
                        max_digits=10,
                        null=True,
                        verbose_name="Max Quantity per Package",
                    ),
                ),
                (
                    "lq_code",
                    models.CharField(
                        blank=True,
                        help_text="Limited quantity code from ADG Code",
                        max_length=10,
                        verbose_name="LQ Code",
                    ),
                ),
                (
                    "is_lq_permitted",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this dangerous good can be transported as Limited Quantity",
                        verbose_name="LQ Permitted",
                    ),
                ),
                (
                    "requires_orientation_arrows",
                    models.BooleanField(
                        default=False,
                        help_text="Whether orientation arrows are required for LQ packages",
                        verbose_name="Requires Orientation Arrows",
                    ),
                ),
                (
                    "special_provisions",
                    models.TextField(
                        blank=True,
                        help_text="Special provisions for LQ transport of this dangerous good",
                        verbose_name="Special LQ Provisions",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dangerous_good",
                    models.OneToOneField(
                        help_text="Dangerous good this LQ limit applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lq_limit",
                        to="dangerous_goods.dangerousgood",
                    ),
                ),
            ],
            options={
                "verbose_name": "Limited Quantity Limit",
                "verbose_name_plural": "Limited Quantity Limits",
                "indexes": [
                    models.Index(
                        fields=["dangerous_good"], name="dangerous_g_dangero_cf9114_idx"
                    ),
                    models.Index(
                        fields=["is_lq_permitted"],
                        name="dangerous_g_is_lq_p_41be28_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PHSegregationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ph_range_type",
                    models.CharField(
                        choices=[
                            ("STRONGLY_ACIDIC", "Strongly Acidic (pH < 2)"),
                            ("ACIDIC", "Acidic (pH 2-6.9)"),
                            ("NEUTRAL", "Neutral (pH 7-7.5)"),
                            ("ALKALINE", "Alkaline (pH 7.6-12.5)"),
                            ("STRONGLY_ALKALINE", "Strongly Alkaline (pH > 12.5)"),
                        ],
                        db_index=True,
                        max_length=30,
                        verbose_name="pH Range Type",
                    ),
                ),
                (
                    "ph_min",
                    models.FloatField(
                        blank=True,
                        help_text="Minimum pH value for this rule (overrides range type if specified)",
                        null=True,
                        verbose_name="Minimum pH",
                    ),
                ),
                (
                    "ph_max",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum pH value for this rule (overrides range type if specified)",
                        null=True,
                        verbose_name="Maximum pH",
                    ),
                ),
                (
                    "target_type",
                    models.CharField(
                        choices=[
                            ("FOOD", "Food and Foodstuffs"),
                            ("FOOD_PACKAGING", "Food Packaging and Containers"),
                            ("FOOD_GRADE_MATERIALS", "Food Grade Materials"),
                            ("ALKALINE_MATERIALS", "Alkaline Materials"),
                            ("ACIDIC_MATERIALS", "Acidic Materials"),
                            ("OXIDIZING_AGENTS", "Oxidizing Agents"),
                            ("GENERAL_CARGO", "General Cargo"),
                        ],
                        db_index=True,
                        max_length=30,
                        verbose_name="Target Material Type",
                    ),
                ),
                (
                    "severity_level",
                    models.CharField(
                        choices=[
                            ("PROHIBITED", "Prohibited - Never allow"),
                            ("CRITICAL", "Critical - Separate storage required"),
                            ("HIGH", "High - Minimum 10m separation"),
                            ("MEDIUM", "Medium - Minimum 5m separation"),
                            ("LOW", "Low - Standard segregation"),
                            ("CAUTION", "Caution - Monitor conditions"),
                        ],
                        db_index=True,
                        max_length=20,
                        verbose_name="Severity Level",
                    ),
                ),
                (
                    "min_separation_distance",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Minimum required separation distance in meters",
                        null=True,
                        verbose_name="Minimum Separation Distance (meters)",
                    ),
                ),
                (
                    "requirements",
                    models.JSONField(
                        default=list,
                        help_text="List of specific segregation requirements",
                        verbose_name="Specific Requirements",
                    ),
                ),
                (
                    "safety_recommendations",
                    models.JSONField(
                        default=list,
                        help_text="List of safety recommendations for this pH range",
                        verbose_name="Safety Recommendations",
                    ),
                ),
                (
                    "regulatory_basis",
                    models.CharField(
                        blank=True,
                        help_text="Regulatory standard or guideline this rule is based on",
                        max_length=200,
                        verbose_name="Regulatory Basis",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information or special conditions",
                        verbose_name="Additional Notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_ph_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "pH Segregation Rule",
                "verbose_name_plural": "pH Segregation Rules",
                "ordering": ["severity_level", "ph_range_type", "target_type"],
                "indexes": [
                    models.Index(
                        fields=["ph_range_type", "target_type"],
                        name="dangerous_g_ph_rang_10065d_idx",
                    ),
                    models.Index(
                        fields=["severity_level", "target_type"],
                        name="dangerous_g_severit_67c686_idx",
                    ),
                    models.Index(
                        fields=["ph_min", "ph_max"],
                        name="dangerous_g_ph_min_9e3e4e_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="digitalplacard",
            index=models.Index(
                fields=["placard_id"], name="dangerous_g_placard_fa694c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="digitalplacard",
            index=models.Index(
                fields=["status", "valid_from"], name="dangerous_g_status_194449_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="digitalplacard",
            index=models.Index(
                fields=["placard_requirement", "placard_type"],
                name="dangerous_g_placard_d43c7b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="placardverification",
            index=models.Index(
                fields=["digital_placard", "verified_at"],
                name="dangerous_g_digital_703e6c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="placardverification",
            index=models.Index(
                fields=["verification_result", "verified_at"],
                name="dangerous_g_verific_8913e0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="placardverification",
            index=models.Index(
                fields=["verified_by", "verified_at"],
                name="dangerous_g_verifie_2719b8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transportdocument",
            index=models.Index(
                fields=["document_number"], name="dangerous_g_documen_120ecf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transportdocument",
            index=models.Index(
                fields=["shipment", "document_type"],
                name="dangerous_g_shipmen_458c08_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transportdocument",
            index=models.Index(
                fields=["status", "document_type"], name="dangerous_g_status_f2a59b_idx"
            ),
        ),
    ]
