# Generated by Django 5.2.1 on 2025-05-29 13:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DangerousGood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "un_number",
                    models.CharField(
                        db_index=True,
                        help_text="Unique UN number for the hazardous substance (e.g., UN1230).",
                        max_length=10,
                        unique=True,
                        verbose_name="UN Number",
                    ),
                ),
                (
                    "proper_shipping_name",
                    models.CharField(
                        db_index=True,
                        help_text="Official name for the hazardous material for transportation.",
                        max_length=500,
                        verbose_name="Proper Shipping Name (PSN)",
                    ),
                ),
                (
                    "simplified_name",
                    models.CharField(
                        blank=True,
                        help_text="A more concise or common name for the material.",
                        max_length=500,
                        null=True,
                        verbose_name="Simplified/Common Name",
                    ),
                ),
                (
                    "hazard_class",
                    models.CharField(
                        db_index=True,
                        help_text="Hazard class or division (e.g., 3 for flammable liquids).",
                        max_length=10,
                        verbose_name="Hazard Class/Division",
                    ),
                ),
                (
                    "subsidiary_risks",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated subsidiary hazard classes/divisions, if any.",
                        max_length=100,
                        null=True,
                        verbose_name="Subsidiary Risks",
                    ),
                ),
                (
                    "packing_group",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("I", "I (High Danger)"),
                            ("II", "II (Medium Danger)"),
                            ("III", "III (Low Danger)"),
                        ],
                        help_text="Packing group indicating the degree of danger.",
                        max_length=5,
                        null=True,
                        verbose_name="Packing Group",
                    ),
                ),
                (
                    "hazard_labels_required",
                    models.CharField(
                        blank=True,
                        help_text="Required hazard labels (e.g., 'Flammable Liquid', 'Toxic'). Comma-separated if multiple.",
                        max_length=200,
                        null=True,
                        verbose_name="Hazard Label(s) Required",
                    ),
                ),
                (
                    "erg_guide_number",
                    models.CharField(
                        blank=True,
                        help_text="Emergency Response Guidebook number (e.g., 128).",
                        max_length=10,
                        null=True,
                        verbose_name="ERG Guide Number",
                    ),
                ),
                (
                    "special_provisions",
                    models.TextField(
                        blank=True,
                        help_text="Applicable special provisions (e.g., A1, A20, codes from regulations). Can be comma-separated or detailed text.",
                        null=True,
                        verbose_name="Special Provisions",
                    ),
                ),
                (
                    "qty_ltd_passenger_aircraft",
                    models.CharField(
                        blank=True,
                        help_text="Quantity limitation for passenger aircraft (e.g., '1 L', 'Forbidden').",
                        max_length=50,
                        null=True,
                        verbose_name="Qty Ltd - Passenger Aircraft",
                    ),
                ),
                (
                    "packing_instruction_passenger_aircraft",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Packing Instruction - Passenger Aircraft",
                    ),
                ),
                (
                    "qty_ltd_cargo_aircraft",
                    models.CharField(
                        blank=True,
                        help_text="Quantity limitation for cargo aircraft (e.g., '30 L', 'Forbidden').",
                        max_length=50,
                        null=True,
                        verbose_name="Qty Ltd - Cargo Aircraft Only",
                    ),
                ),
                (
                    "packing_instruction_cargo_aircraft",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Packing Instruction - Cargo Aircraft",
                    ),
                ),
                (
                    "description_notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional descriptive notes or remarks from regulations.",
                        null=True,
                        verbose_name="Description/Notes",
                    ),
                ),
                (
                    "is_marine_pollutant",
                    models.BooleanField(
                        default=False,
                        help_text="Is the substance a marine pollutant (relevant for IMDG)?",
                        verbose_name="Marine Pollutant",
                    ),
                ),
                (
                    "is_environmentally_hazardous",
                    models.BooleanField(
                        default=False, verbose_name="Environmentally Hazardous"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Dangerous Good / Hazardous Material",
                "verbose_name_plural": "Dangerous Goods / Hazardous Materials",
                "ordering": ["un_number"],
                "indexes": [
                    models.Index(
                        fields=["un_number"], name="dangerous_g_un_numb_f415c3_idx"
                    ),
                    models.Index(
                        fields=["proper_shipping_name"],
                        name="dangerous_g_proper__3c12db_idx",
                    ),
                    models.Index(
                        fields=["hazard_class"], name="dangerous_g_hazard__fe7030_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SegregationGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="A code for the segregation group (e.g., 'SGG1a').",
                        max_length=20,
                        unique=True,
                        verbose_name="Group Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name of the segregation group.",
                        max_length=255,
                        verbose_name="Group Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "dangerous_goods",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Dangerous goods belonging to this segregation group.",
                        related_name="segregation_groups",
                        to="dangerous_goods.dangerousgood",
                    ),
                ),
            ],
            options={
                "verbose_name": "DG Segregation Group",
                "verbose_name_plural": "DG Segregation Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SegregationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("CLASS_CLASS", "Class vs Class"),
                            ("GROUP_GROUP", "Segregation Group vs Segregation Group"),
                            ("UN_UN", "UN Number vs UN Number"),
                        ],
                        default="CLASS_CLASS",
                        max_length=20,
                    ),
                ),
                (
                    "primary_hazard_class",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=10,
                        null=True,
                        verbose_name="Primary Hazard Class",
                    ),
                ),
                (
                    "secondary_hazard_class",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=10,
                        null=True,
                        verbose_name="Secondary Hazard Class",
                    ),
                ),
                (
                    "compatibility_status",
                    models.CharField(
                        choices=[
                            ("COMPATIBLE", "Compatible"),
                            ("INCOMPATIBLE_PROHIBITED", "Incompatible - Prohibited"),
                            ("AWAY_FROM", "Away From"),
                            ("SEPARATED_FROM", "Separated From"),
                            ("SEP_COMPARTMENT", "Separated by Complete Compartment"),
                            ("SEP_LONG", "Separated Longitudinally"),
                        ],
                        help_text="The required segregation or compatibility status.",
                        max_length=30,
                        verbose_name="Compatibility Status",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Specific conditions or notes for this segregation rule.",
                        null=True,
                        verbose_name="Notes/Conditions",
                    ),
                ),
                (
                    "primary_segregation_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="primary_rules",
                        to="dangerous_goods.segregationgroup",
                    ),
                ),
                (
                    "secondary_segregation_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="secondary_rules",
                        to="dangerous_goods.segregationgroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "DG Segregation/Compatibility Rule",
                "verbose_name_plural": "DG Segregation/Compatibility Rules",
            },
        ),
        migrations.CreateModel(
            name="DGProductSynonym",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "synonym",
                    models.CharField(
                        db_index=True,
                        help_text="A common name, trade name, or keyword for the DG.",
                        max_length=255,
                        verbose_name="Keyword/Product Name/Synonym",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("MANUAL", "Manually Entered"),
                            ("IATA_IMPORT", "IATA Data Import"),
                            ("LEARNED_SYSTEM", "Learned by System"),
                            ("USER_CONFIRMED", "User Confirmed"),
                        ],
                        default="MANUAL",
                        help_text="How this synonym was added to the system.",
                        max_length=20,
                        verbose_name="Source of Synonym",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dangerous_good",
                    models.ForeignKey(
                        help_text="The official Dangerous Good entry this synonym refers to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="synonyms",
                        to="dangerous_goods.dangerousgood",
                    ),
                ),
            ],
            options={
                "verbose_name": "DG Product Synonym/Keyword",
                "verbose_name_plural": "DG Product Synonyms/Keywords",
                "ordering": ["dangerous_good", "synonym"],
                "indexes": [
                    models.Index(
                        fields=["synonym"], name="dangerous_g_synonym_9dd255_idx"
                    )
                ],
                "unique_together": {("dangerous_good", "synonym")},
            },
        ),
    ]
