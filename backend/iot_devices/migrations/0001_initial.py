# Generated by Django 5.2.1 on 2025-07-19 (manually created for IoT tracking)

import django.core.validators
import uuid
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('vehicles', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('sensor', 'Sensor'), ('tracker', 'Tracker'), ('monitor', 'Monitor'), ('controller', 'Controller')], max_length=20)),
                ('description', models.TextField()),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('supported_sensors', models.JSONField(default=list)),
                ('communication_protocols', models.JSONField(default=list)),
                ('power_source', models.CharField(blank=True, max_length=50)),
                ('default_config', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='IoTDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_id', models.CharField(max_length=100, unique=True)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('firmware_version', models.CharField(blank=True, max_length=50)),
                ('hardware_version', models.CharField(blank=True, max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('error', 'Error')], default='inactive', max_length=20)),
                ('api_key', models.CharField(max_length=64, unique=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('battery_level', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('signal_strength', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-120), django.core.validators.MaxValueValidator(0)])),
                ('location_lat', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('location_lon', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('location_accuracy', models.FloatField(blank=True, null=True)),
                ('location_timestamp', models.DateTimeField(blank=True, null=True)),
                ('config', models.JSONField(default=dict)),
                ('metadata', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='iot_devices.devicetype')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_devices', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iot_devices', to='vehicles.vehicle')),
            ],
            options={
                'ordering': ['-last_seen', 'device_id'],
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sensor_type', models.CharField(choices=[('temperature', 'Temperature'), ('humidity', 'Humidity'), ('pressure', 'Pressure'), ('accelerometer', 'Accelerometer'), ('gyroscope', 'Gyroscope'), ('magnetometer', 'Magnetometer'), ('gps', 'GPS'), ('proximity', 'Proximity'), ('light', 'Light'), ('sound', 'Sound'), ('vibration', 'Vibration'), ('door_status', 'Door Status'), ('fuel_level', 'Fuel Level'), ('battery_voltage', 'Battery Voltage'), ('custom', 'Custom')], max_length=30)),
                ('value', models.JSONField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('quality', models.CharField(choices=[('good', 'Good'), ('poor', 'Poor'), ('bad', 'Bad'), ('unknown', 'Unknown')], default='good', max_length=10)),
                ('timestamp', models.DateTimeField()),
                ('location_lat', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('location_lon', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_data', to='iot_devices.iotdevice')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [
                    models.Index(fields=['device', 'sensor_type', 'timestamp'], name='iot_devices_s_device__b8a416_idx'),
                    models.Index(fields=['timestamp'], name='iot_devices_s_timesta_a1b9a0_idx'),
                    models.Index(fields=['sensor_type'], name='iot_devices_s_sensor__52c6bc_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='DeviceAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('battery_low', 'Battery Low'), ('offline', 'Device Offline'), ('sensor_error', 'Sensor Error'), ('threshold_exceeded', 'Threshold Exceeded'), ('geofence_exit', 'Geofence Exit'), ('geofence_enter', 'Geofence Enter'), ('maintenance_due', 'Maintenance Due'), ('custom', 'Custom Alert')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('message', models.TextField()),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='iot_devices.iotdevice')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [
                    models.Index(fields=['device', 'alert_type'], name='iot_devices_d_device__8c9384_idx'),
                    models.Index(fields=['severity', 'is_resolved'], name='iot_devices_d_severit_c7b5a1_idx'),
                    models.Index(fields=['created_at'], name='iot_devices_d_created_707c2f_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='DeviceCommand',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('command_type', models.CharField(choices=[('reboot', 'Reboot'), ('update_config', 'Update Config'), ('start_sensor', 'Start Sensor'), ('stop_sensor', 'Stop Sensor'), ('calibrate', 'Calibrate'), ('ping', 'Ping'), ('custom', 'Custom Command')], max_length=30)),
                ('parameters', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('acknowledged', 'Acknowledged'), ('completed', 'Completed'), ('failed', 'Failed'), ('timeout', 'Timeout')], default='pending', max_length=20)),
                ('response', models.JSONField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('timeout_seconds', models.IntegerField(default=300)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commands', to='iot_devices.iotdevice')),
                ('sent_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_commands', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('group_type', models.CharField(choices=[('fleet', 'Fleet'), ('route', 'Route'), ('location', 'Location'), ('custom', 'Custom')], max_length=20)),
                ('config', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('devices', models.ManyToManyField(blank=True, related_name='groups', to='iot_devices.iotdevice')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]