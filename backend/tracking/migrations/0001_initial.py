# Generated by Django 5.2.1 on 2025-01-27 12:00

from django.db import migrations, models
from django.contrib.gis.db import models as gis_models
import django.core.validators
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('vehicles', '0001_initial'),
        ('shipments', '0001_initial'),
        ('locations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GPSEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('coordinates', gis_models.PointField(geography=True, help_text='Spatial point for the GPS event')),
                ('speed', models.FloatField(blank=True, help_text='Speed in km/h', null=True)),
                ('heading', models.FloatField(blank=True, help_text='Heading in degrees (0-360)', null=True)),
                ('accuracy', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('battery_level', models.FloatField(blank=True, help_text='Battery level percentage (0-100)', null=True)),
                ('signal_strength', models.IntegerField(blank=True, help_text='Signal strength in dBm', null=True)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(choices=[('GPS_DEVICE', 'GPS Device'), ('MOBILE_APP', 'Mobile App'), ('MANUAL', 'Manual Entry')], default='GPS_DEVICE', max_length=50)),
                ('raw_data', models.JSONField(blank=True, help_text='Raw data from the GPS device', null=True)),
                ('shipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gps_events', to='shipments.shipment')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gps_events', to='vehicles.vehicle')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LocationVisit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entry_time', models.DateTimeField(db_index=True)),
                ('exit_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('demurrage_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated demurrage hours', max_digits=10, null=True)),
                ('demurrage_charge', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated demurrage charge', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active Visit'), ('COMPLETED', 'Completed Visit'), ('CANCELLED', 'Cancelled Visit')], default='ACTIVE', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('entry_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_visits', to='tracking.gpsevent')),
                ('exit_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exit_visits', to='tracking.gpsevent')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='locations.geolocation')),
                ('shipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_visits', to='shipments.shipment')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_visits', to='vehicles.vehicle')),
            ],
            options={
                'ordering': ['-entry_time'],
            },
        ),
        # Create database indexes for efficient querying
        migrations.AddIndex(
            model_name='gpsevent',
            index=models.Index(fields=['timestamp'], name='tracking_gp_timesta_1a2b3c_idx'),
        ),
        migrations.AddIndex(
            model_name='gpsevent',
            index=models.Index(fields=['vehicle', 'timestamp'], name='tracking_gp_vehicle_4d5e6f_idx'),
        ),
        migrations.AddIndex(
            model_name='gpsevent',
            index=models.Index(fields=['shipment', 'timestamp'], name='tracking_gp_shipmen_7g8h9i_idx'),
        ),
        migrations.AddIndex(
            model_name='locationvisit',
            index=models.Index(fields=['location', 'entry_time'], name='tracking_lo_locatio_0j1k2l_idx'),
        ),
        migrations.AddIndex(
            model_name='locationvisit',
            index=models.Index(fields=['vehicle', 'entry_time'], name='tracking_lo_vehicle_3m4n5o_idx'),
        ),
        migrations.AddIndex(
            model_name='locationvisit',
            index=models.Index(fields=['shipment', 'entry_time'], name='tracking_lo_shipmen_6p7q8r_idx'),
        ),
        migrations.AddIndex(
            model_name='locationvisit',
            index=models.Index(fields=['status'], name='tracking_lo_status_9s0t1u_idx'),
        ),
        # Add spatial index for GPS coordinates
        migrations.RunSQL(
            sql="CREATE INDEX tracking_gpsevent_coordinates_gist ON tracking_gpsevent USING GIST (coordinates);",
            reverse_sql="DROP INDEX IF EXISTS tracking_gpsevent_coordinates_gist;"
        ),
    ]
