# Generated by Django 5.2.1 on 2025-07-14 09:37

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("locations", "0002_alter_geolocation_options_and_more"),
        ("shipments", "0002_consignmentitem_dg_quantity_type_and_more"),
        (
            "vehicles",
            "0003_rename_vehicles_sa_equipme_1k2l3m_idx_vehicles_sa_equipme_3dfb6c_idx_and_more",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("OPTIMIZED", "Optimized"),
                            ("ASSIGNED", "Assigned to Vehicle"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "optimization_type",
                    models.CharField(
                        choices=[
                            ("SHORTEST_DISTANCE", "Minimize Distance"),
                            ("FASTEST_TIME", "Minimize Time"),
                            ("LOWEST_COST", "Minimize Cost"),
                            ("BALANCED", "Balanced Optimization"),
                        ],
                        default="BALANCED",
                        max_length=20,
                    ),
                ),
                (
                    "optimization_score",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "total_distance_km",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "estimated_fuel_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "estimated_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                ("planned_start_time", models.DateTimeField()),
                ("planned_end_time", models.DateTimeField()),
                ("actual_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "max_working_hours",
                    models.FloatField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(24),
                        ],
                    ),
                ),
                ("requires_rest_break", models.BooleanField(default=True)),
                ("optimization_algorithm", models.CharField(blank=True, max_length=50)),
                ("optimization_metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("optimized_at", models.DateTimeField(blank=True, null=True)),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="routes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes",
                        to="vehicles.vehicle",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route",
                "verbose_name_plural": "Routes",
                "ordering": ["-planned_start_time"],
            },
        ),
        migrations.CreateModel(
            name="RouteOptimizationResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("algorithm_name", models.CharField(max_length=100)),
                ("algorithm_version", models.CharField(max_length=20)),
                ("optimization_parameters", models.JSONField(default=dict)),
                (
                    "total_distance_km",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "total_time_hours",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "fuel_consumption_liters",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "improvement_percentage",
                    models.FloatField(
                        help_text="Percentage improvement over baseline",
                        validators=[
                            django.core.validators.MinValueValidator(-100),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "feasibility_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("time_window_violations", models.PositiveIntegerField(default=0)),
                ("capacity_violations", models.PositiveIntegerField(default=0)),
                ("working_time_violations", models.PositiveIntegerField(default=0)),
                (
                    "alternative_routes",
                    models.JSONField(
                        default=list, help_text="Alternative route configurations"
                    ),
                ),
                (
                    "computation_time_seconds",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("iterations", models.PositiveIntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="optimization_results",
                        to="routes.route",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Optimization Result",
                "verbose_name_plural": "Route Optimization Results",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RouteStop",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stop_type",
                    models.CharField(
                        choices=[
                            ("PICKUP", "Pickup"),
                            ("DELIVERY", "Delivery"),
                            ("BOTH", "Pickup & Delivery"),
                            ("REST_BREAK", "Rest Break"),
                            ("FUEL_STOP", "Fuel Stop"),
                            ("DEPOT", "Depot"),
                        ],
                        default="DELIVERY",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("IN_TRANSIT", "En Route"),
                            ("ARRIVED", "Arrived"),
                            ("COMPLETED", "Completed"),
                            ("SKIPPED", "Skipped"),
                            ("FAILED", "Failed"),
                        ],
                        default="PLANNED",
                        max_length=15,
                    ),
                ),
                ("sequence_number", models.PositiveIntegerField()),
                ("earliest_arrival", models.DateTimeField()),
                ("latest_arrival", models.DateTimeField()),
                ("planned_arrival", models.DateTimeField()),
                ("planned_departure", models.DateTimeField()),
                ("actual_arrival", models.DateTimeField(blank=True, null=True)),
                ("actual_departure", models.DateTimeField(blank=True, null=True)),
                (
                    "estimated_service_time_minutes",
                    models.PositiveIntegerField(default=30),
                ),
                (
                    "actual_service_time_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "distance_from_previous_km",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "travel_time_from_previous_minutes",
                    models.PositiveIntegerField(default=0),
                ),
                ("requires_appointment", models.BooleanField(default=False)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("special_instructions", models.TextField(blank=True)),
                (
                    "pickup_weight_kg",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "delivery_weight_kg",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "pickup_volume_m3",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "delivery_volume_m3",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_stops",
                        to="locations.geolocation",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stops",
                        to="routes.route",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Stop",
                "verbose_name_plural": "Route Stops",
                "ordering": ["route", "sequence_number"],
            },
        ),
        migrations.CreateModel(
            name="RouteStopShipment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[("PICKUP", "Pickup"), ("DELIVERY", "Delivery")],
                        max_length=10,
                    ),
                ),
                ("items_count", models.PositiveIntegerField(default=0)),
                (
                    "weight_kg",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "volume_m3",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("signature_required", models.BooleanField(default=True)),
                (
                    "route_stop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="routes.routestop",
                    ),
                ),
                (
                    "shipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="shipments.shipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Stop Shipment",
                "verbose_name_plural": "Route Stop Shipments",
            },
        ),
        migrations.AddField(
            model_name="routestop",
            name="shipments",
            field=models.ManyToManyField(
                related_name="route_stops",
                through="routes.RouteStopShipment",
                to="shipments.shipment",
            ),
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["status", "planned_start_time"],
                name="routes_rout_status_3e5c0e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["vehicle", "status"], name="routes_rout_vehicle_f70f4b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="routestopshipment",
            unique_together={("route_stop", "shipment", "action")},
        ),
        migrations.AddIndex(
            model_name="routestop",
            index=models.Index(
                fields=["route", "sequence_number"],
                name="routes_rout_route_i_5874c1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="routestop",
            index=models.Index(
                fields=["status", "planned_arrival"],
                name="routes_rout_status_9cdcea_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="routestop",
            unique_together={("route", "sequence_number")},
        ),
    ]
