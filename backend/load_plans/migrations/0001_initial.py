# Generated by Django 5.2.1 on 2025-07-14 09:37

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LoadingConstraint",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "constraint_type",
                    models.CharField(
                        choices=[
                            ("WEIGHT_DIST", "Weight Distribution"),
                            ("DG_SEGREGATION", "Dangerous Goods Segregation"),
                            ("FRAGILE", "Fragile Item Handling"),
                            ("TEMPERATURE", "Temperature Control"),
                            ("DELIVERY_SEQ", "Delivery Sequence"),
                            ("CUSTOMS", "Customs Zone Separation"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "parameters",
                    models.JSONField(
                        default=dict, help_text="Constraint-specific parameters"
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this constraint must be satisfied",
                    ),
                ),
                (
                    "penalty_score",
                    models.FloatField(
                        default=100, help_text="Penalty score if constraint is violated"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Loading Constraint",
                "verbose_name_plural": "Loading Constraints",
            },
        ),
        migrations.CreateModel(
            name="LoadPlanItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "position_x_cm",
                    models.FloatField(
                        help_text="X position from vehicle front (cm)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "position_y_cm",
                    models.FloatField(
                        help_text="Y position from vehicle left side (cm)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "position_z_cm",
                    models.FloatField(
                        help_text="Z position from vehicle floor (cm)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "length_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "width_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "height_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "weight_kg",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "load_sequence",
                    models.PositiveIntegerField(
                        help_text="Order in which items should be loaded (1=first)"
                    ),
                ),
                (
                    "unload_sequence",
                    models.PositiveIntegerField(
                        help_text="Order in which items will be unloaded (1=first)"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("LOADING", "Loading"),
                            ("LOADED", "Loaded"),
                            ("UNLOADING", "Unloading"),
                            ("DELIVERED", "Delivered"),
                        ],
                        default="PLANNED",
                        max_length=20,
                    ),
                ),
                ("is_stackable", models.BooleanField(default=True)),
                (
                    "max_stack_weight_kg",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum weight that can be stacked on top",
                        null=True,
                    ),
                ),
                ("requires_special_handling", models.BooleanField(default=False)),
                (
                    "segregation_group",
                    models.CharField(
                        blank=True,
                        help_text="Segregation group for dangerous goods",
                        max_length=50,
                    ),
                ),
                (
                    "min_distance_from_dg_cm",
                    models.FloatField(
                        default=0,
                        help_text="Minimum distance from other dangerous goods (cm)",
                    ),
                ),
                (
                    "delivery_stop_number",
                    models.PositiveIntegerField(
                        help_text="Stop number where this item will be delivered"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("loaded_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Load Plan Item",
                "verbose_name_plural": "Load Plan Items",
                "ordering": ["load_sequence"],
            },
        ),
        migrations.CreateModel(
            name="LoadPlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("OPTIMIZING", "Optimizing"),
                            ("OPTIMIZED", "Optimized"),
                            ("CONFIRMED", "Confirmed"),
                            ("LOADING", "Loading in Progress"),
                            ("LOADED", "Loaded"),
                            ("IN_TRANSIT", "In Transit"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "optimization_type",
                    models.CharField(
                        choices=[
                            ("VOLUME", "Maximize Volume"),
                            ("WEIGHT", "Maximize Weight"),
                            ("REVENUE", "Maximize Revenue"),
                            ("MIXED", "Mixed Optimization"),
                        ],
                        default="MIXED",
                        max_length=20,
                    ),
                ),
                (
                    "max_weight_kg",
                    models.FloatField(
                        help_text="Maximum weight capacity in kg",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "max_volume_m3",
                    models.FloatField(
                        help_text="Maximum volume capacity in cubic meters",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cargo_length_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "cargo_width_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "cargo_height_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "planned_weight_kg",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "planned_volume_m3",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "weight_utilization_pct",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "volume_utilization_pct",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "estimated_revenue",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Estimated total revenue for this load",
                        max_digits=12,
                    ),
                ),
                (
                    "revenue_per_km",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Revenue per kilometer",
                        max_digits=10,
                    ),
                ),
                (
                    "optimization_score",
                    models.FloatField(
                        default=0,
                        help_text="Overall optimization score (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "optimization_algorithm",
                    models.CharField(
                        blank=True,
                        help_text="Algorithm used for optimization",
                        max_length=50,
                    ),
                ),
                (
                    "optimization_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed optimization results and parameters",
                    ),
                ),
                ("contains_dangerous_goods", models.BooleanField(default=False)),
                (
                    "dg_compliance_status",
                    models.CharField(
                        choices=[
                            ("COMPLIANT", "Compliant"),
                            ("VIOLATIONS", "Has Violations"),
                            ("PENDING", "Pending Review"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "dg_violations",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of dangerous goods violations",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("optimized_at", models.DateTimeField(blank=True, null=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "confirmed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="confirmed_load_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_load_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Load Plan",
                "verbose_name_plural": "Load Plans",
                "ordering": ["-created_at"],
            },
        ),
    ]
