# Generated by Django 5.2.1 on 2025-07-13 09:04

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "dangerous_goods",
            "0004_placardtemplate_adgplacardrule_emergencycontact_and_more",
        ),
        ("epg", "0001_initial"),
        ("shipments", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EmergencyProcedureGuide",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "epg_number",
                    models.CharField(
                        help_text="Unique EPG identifier (e.g., EPG-001, ERG-128)",
                        max_length=20,
                        unique=True,
                        verbose_name="EPG Number",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Descriptive title for the emergency procedure",
                        max_length=255,
                        verbose_name="Title",
                    ),
                ),
                (
                    "hazard_class",
                    models.CharField(
                        db_index=True,
                        help_text="Primary hazard class this EPG covers",
                        max_length=10,
                        verbose_name="Hazard Class",
                    ),
                ),
                (
                    "subsidiary_risks",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Additional hazard classes covered",
                        verbose_name="Subsidiary Risks",
                    ),
                ),
                (
                    "emergency_types",
                    models.JSONField(
                        default=list,
                        help_text="Types of emergencies this EPG addresses",
                        verbose_name="Emergency Types",
                    ),
                ),
                (
                    "immediate_actions",
                    models.TextField(
                        help_text="First response actions to take immediately",
                        verbose_name="Immediate Actions",
                    ),
                ),
                (
                    "personal_protection",
                    models.TextField(
                        help_text="Personal protective equipment and safety measures",
                        verbose_name="Personal Protection",
                    ),
                ),
                (
                    "fire_procedures",
                    models.TextField(
                        blank=True,
                        help_text="Fire suppression and firefighting procedures",
                        verbose_name="Fire Fighting Procedures",
                    ),
                ),
                (
                    "spill_procedures",
                    models.TextField(
                        blank=True,
                        help_text="Spill containment and cleanup procedures",
                        verbose_name="Spill Response Procedures",
                    ),
                ),
                (
                    "medical_procedures",
                    models.TextField(
                        blank=True,
                        help_text="First aid and medical response procedures",
                        verbose_name="Medical Response",
                    ),
                ),
                (
                    "evacuation_procedures",
                    models.TextField(
                        blank=True,
                        help_text="Evacuation distances and procedures",
                        verbose_name="Evacuation Procedures",
                    ),
                ),
                (
                    "notification_requirements",
                    models.TextField(
                        help_text="Who to contact and when",
                        verbose_name="Notification Requirements",
                    ),
                ),
                (
                    "emergency_contacts",
                    models.JSONField(
                        default=dict,
                        help_text="Emergency contact information by region/country",
                        verbose_name="Emergency Contacts",
                    ),
                ),
                (
                    "isolation_distances",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Isolation distances for different scenarios (meters)",
                        verbose_name="Isolation Distances",
                    ),
                ),
                (
                    "protective_action_distances",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Evacuation/shelter distances for different conditions",
                        verbose_name="Protective Action Distances",
                    ),
                ),
                (
                    "environmental_precautions",
                    models.TextField(
                        blank=True,
                        help_text="Environmental protection measures",
                        verbose_name="Environmental Precautions",
                    ),
                ),
                (
                    "water_pollution_response",
                    models.TextField(
                        blank=True,
                        help_text="Procedures for water contamination",
                        verbose_name="Water Pollution Response",
                    ),
                ),
                (
                    "transport_specific_guidance",
                    models.TextField(
                        blank=True,
                        help_text="Special considerations for transport incidents",
                        verbose_name="Transport-Specific Guidance",
                    ),
                ),
                (
                    "weather_considerations",
                    models.TextField(
                        blank=True,
                        help_text="How weather affects emergency response",
                        verbose_name="Weather Considerations",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("DRAFT", "Draft"),
                            ("UNDER_REVIEW", "Under Review"),
                            ("ARCHIVED", "Archived"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "severity_level",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Risk"),
                            ("MEDIUM", "Medium Risk"),
                            ("HIGH", "High Risk"),
                            ("CRITICAL", "Critical Risk"),
                        ],
                        db_index=True,
                        default="MEDIUM",
                        max_length=20,
                        verbose_name="Severity Level",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="EPG version number",
                        max_length=20,
                        verbose_name="Version",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date when this EPG becomes effective",
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "review_date",
                    models.DateField(
                        blank=True,
                        help_text="Date for next review/update",
                        null=True,
                        verbose_name="Next Review Date",
                    ),
                ),
                (
                    "regulatory_references",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Regulatory standards and references",
                        verbose_name="Regulatory References",
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        default="US",
                        help_text="Country-specific regulatory context",
                        max_length=2,
                        verbose_name="Country Code",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_epgs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dangerous_good",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific dangerous good this EPG applies to (leave blank for generic hazard class EPG)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emergency_guides",
                        to="dangerous_goods.dangerousgood",
                        verbose_name="Specific Dangerous Good",
                    ),
                ),
            ],
            options={
                "verbose_name": "Emergency Procedure Guide",
                "verbose_name_plural": "Emergency Procedure Guides",
                "ordering": ["epg_number", "-effective_date"],
            },
        ),
        migrations.CreateModel(
            name="ShipmentEmergencyPlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "plan_number",
                    models.CharField(
                        help_text="Unique emergency plan identifier",
                        max_length=50,
                        unique=True,
                        verbose_name="Plan Number",
                    ),
                ),
                (
                    "executive_summary",
                    models.TextField(
                        help_text="Summary of key emergency information",
                        verbose_name="Executive Summary",
                    ),
                ),
                (
                    "hazard_assessment",
                    models.JSONField(
                        default=dict,
                        help_text="Assessment of all hazards in the shipment",
                        verbose_name="Hazard Assessment",
                    ),
                ),
                (
                    "immediate_response_actions",
                    models.TextField(
                        help_text="Consolidated immediate actions for all hazards",
                        verbose_name="Immediate Response Actions",
                    ),
                ),
                (
                    "specialized_procedures",
                    models.JSONField(
                        default=dict,
                        help_text="Procedures specific to dangerous goods in shipment",
                        verbose_name="Specialized Procedures",
                    ),
                ),
                (
                    "route_emergency_contacts",
                    models.JSONField(
                        default=dict,
                        help_text="Emergency contacts along the route",
                        verbose_name="Route Emergency Contacts",
                    ),
                ),
                (
                    "hospital_locations",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Hospitals along the route",
                        verbose_name="Hospital Locations",
                    ),
                ),
                (
                    "special_considerations",
                    models.TextField(
                        blank=True,
                        help_text="Route-specific or shipment-specific considerations",
                        verbose_name="Special Considerations",
                    ),
                ),
                (
                    "notification_matrix",
                    models.JSONField(
                        default=dict,
                        help_text="Who to contact for different emergency types",
                        verbose_name="Notification Matrix",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("GENERATED", "Generated"),
                            ("REVIEWED", "Reviewed"),
                            ("APPROVED", "Approved"),
                            ("ACTIVE", "Active"),
                            ("EXPIRED", "Expired"),
                        ],
                        db_index=True,
                        default="GENERATED",
                        max_length=20,
                        verbose_name="Plan Status",
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_emergency_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_emergency_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "referenced_epgs",
                    models.ManyToManyField(
                        help_text="EPGs used to generate this plan",
                        related_name="referenced_in_plans",
                        to="epg.emergencyprocedureguide",
                        verbose_name="Referenced EPGs",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_emergency_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shipment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emergency_plan",
                        to="shipments.shipment",
                        verbose_name="Shipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Shipment Emergency Plan",
                "verbose_name_plural": "Shipment Emergency Plans",
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="EmergencyIncident",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "incident_number",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Incident Number"
                    ),
                ),
                (
                    "incident_type",
                    models.CharField(
                        choices=[
                            ("FIRE", "Fire/Explosion"),
                            ("SPILL", "Spill/Leak"),
                            ("EXPOSURE", "Human Exposure"),
                            ("TRANSPORT_ACCIDENT", "Transport Accident"),
                            ("CONTAINER_DAMAGE", "Container Damage"),
                            ("ENVIRONMENTAL", "Environmental Release"),
                            ("MULTI_HAZARD", "Multiple Hazards"),
                        ],
                        max_length=30,
                        verbose_name="Incident Type",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Risk"),
                            ("MEDIUM", "Medium Risk"),
                            ("HIGH", "High Risk"),
                            ("CRITICAL", "Critical Risk"),
                        ],
                        max_length=20,
                        verbose_name="Actual Severity",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Where the incident occurred",
                        max_length=255,
                        verbose_name="Incident Location",
                    ),
                ),
                (
                    "incident_datetime",
                    models.DateTimeField(
                        help_text="When the incident occurred",
                        verbose_name="Incident Date/Time",
                    ),
                ),
                (
                    "response_actions_taken",
                    models.TextField(
                        help_text="What was actually done in response",
                        verbose_name="Response Actions Taken",
                    ),
                ),
                (
                    "response_effectiveness",
                    models.CharField(
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("ADEQUATE", "Adequate"),
                            ("POOR", "Poor"),
                            ("FAILED", "Failed"),
                        ],
                        max_length=20,
                        verbose_name="Response Effectiveness",
                    ),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True,
                        help_text="Key takeaways from the incident",
                        verbose_name="Lessons Learned",
                    ),
                ),
                (
                    "epg_improvements",
                    models.TextField(
                        blank=True,
                        help_text="How EPGs could be improved based on this incident",
                        verbose_name="Suggested EPG Improvements",
                    ),
                ),
                ("reported_at", models.DateTimeField(auto_now_add=True)),
                (
                    "reported_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reported_incidents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shipment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="emergency_incidents",
                        to="shipments.shipment",
                        verbose_name="Related Shipment",
                    ),
                ),
                (
                    "emergency_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="incidents",
                        to="epg.shipmentemergencyplan",
                        verbose_name="Emergency Plan Used",
                    ),
                ),
            ],
            options={
                "verbose_name": "Emergency Incident",
                "verbose_name_plural": "Emergency Incidents",
                "ordering": ["-incident_datetime"],
            },
        ),
        migrations.AddIndex(
            model_name="emergencyprocedureguide",
            index=models.Index(
                fields=["hazard_class", "status"], name="epg_emergen_hazard__dd3cd9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emergencyprocedureguide",
            index=models.Index(
                fields=["dangerous_good", "status"],
                name="epg_emergen_dangero_748cd9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="emergencyprocedureguide",
            index=models.Index(
                fields=["severity_level", "effective_date"],
                name="epg_emergen_severit_b29c4f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="emergencyprocedureguide",
            index=models.Index(
                fields=["country_code", "hazard_class"],
                name="epg_emergen_country_2a0ad2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="shipmentemergencyplan",
            index=models.Index(
                fields=["shipment", "status"], name="epg_shipmen_shipmen_734a6b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="shipmentemergencyplan",
            index=models.Index(
                fields=["status", "generated_at"], name="epg_shipmen_status_dbb43c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emergencyincident",
            index=models.Index(
                fields=["incident_type", "severity"],
                name="epg_emergen_inciden_b9e523_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="emergencyincident",
            index=models.Index(
                fields=["incident_datetime"], name="epg_emergen_inciden_eca495_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emergencyincident",
            index=models.Index(
                fields=["shipment", "incident_type"],
                name="epg_emergen_shipmen_55f382_idx",
            ),
        ),
    ]
