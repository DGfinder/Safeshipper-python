# Generated by Django 5.2.1 on 2025-07-19 (manually created)

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('shipments', '0004_add_date_logic_constraints'),
    ]

    operations = [
        # Add a computed field for total shipment volume (sum of all consignment items)
        # This will be implemented as a database view or trigger in a future iteration
        # For now, we'll add database functions that can be used in queries
        
        migrations.RunSQL(
            sql="""
            -- Create a function to calculate chargeable weight
            -- Standard volumetric factor is 167 kg/m³ for air freight, 333 kg/m³ for road freight
            -- We'll use 250 kg/m³ as a reasonable default
            CREATE OR REPLACE FUNCTION calculate_chargeable_weight(
                dead_weight numeric,
                volumetric_weight numeric,
                volumetric_factor numeric DEFAULT 250
            ) RETURNS numeric AS $$
            BEGIN
                -- Return the greater of dead weight or (volumetric weight * factor)
                RETURN GREATEST(
                    COALESCE(dead_weight, 0),
                    COALESCE(volumetric_weight, 0) * volumetric_factor
                );
            END;
            $$ LANGUAGE plpgsql IMMUTABLE;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS calculate_chargeable_weight(numeric, numeric, numeric);"
        ),
        
        migrations.RunSQL(
            sql="""
            -- Create a function to calculate shipment duration in hours
            CREATE OR REPLACE FUNCTION calculate_shipment_duration_hours(
                pickup_date timestamptz,
                delivery_date timestamptz
            ) RETURNS numeric AS $$
            BEGIN
                IF pickup_date IS NULL OR delivery_date IS NULL THEN
                    RETURN NULL;
                END IF;
                
                RETURN EXTRACT(EPOCH FROM (delivery_date - pickup_date)) / 3600.0;
            END;
            $$ LANGUAGE plpgsql IMMUTABLE;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS calculate_shipment_duration_hours(timestamptz, timestamptz);"
        ),
        
        migrations.RunSQL(
            sql="""
            -- Create an index on the computed chargeable weight for performance
            CREATE INDEX CONCURRENTLY IF NOT EXISTS shipments_shipment_computed_chargeable_weight 
            ON shipments_shipment (calculate_chargeable_weight(dead_weight_kg, volumetric_weight_m3));
            """,
            reverse_sql="DROP INDEX IF EXISTS shipments_shipment_computed_chargeable_weight;"
        ),
        
        # Add a database view for shipment analytics that includes computed values
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE VIEW shipments_analytics AS
            SELECT 
                s.id,
                s.tracking_number,
                s.status,
                s.dead_weight_kg,
                s.volumetric_weight_m3,
                s.chargeable_weight_kg,
                calculate_chargeable_weight(s.dead_weight_kg, s.volumetric_weight_m3) as computed_chargeable_weight_kg,
                calculate_shipment_duration_hours(s.actual_pickup_date, s.actual_delivery_date) as actual_duration_hours,
                calculate_shipment_duration_hours(s.estimated_pickup_date, s.estimated_delivery_date) as estimated_duration_hours,
                CASE 
                    WHEN s.actual_pickup_date IS NOT NULL AND s.actual_delivery_date IS NOT NULL 
                    THEN 'completed'
                    WHEN s.actual_pickup_date IS NOT NULL 
                    THEN 'in_transit'
                    ELSE 'pending'
                END as shipment_phase,
                c_customer.name as customer_name,
                c_carrier.name as carrier_name,
                s.created_at,
                s.updated_at
            FROM shipments_shipment s
            LEFT JOIN companies_company c_customer ON s.customer_id = c_customer.id
            LEFT JOIN companies_company c_carrier ON s.carrier_id = c_carrier.id;
            """,
            reverse_sql="DROP VIEW IF EXISTS shipments_analytics;"
        ),
    ]