# Generated by Django 5.2.1 on 2025-07-13 10:09

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "dangerous_goods",
            "0004_placardtemplate_adgplacardrule_emergencycontact_and_more",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SafetyDataSheet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Commercial product name as appears on SDS",
                        max_length=255,
                        verbose_name="Product Name",
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        help_text="Name of the product manufacturer",
                        max_length=255,
                        verbose_name="Manufacturer",
                    ),
                ),
                (
                    "manufacturer_code",
                    models.CharField(
                        blank=True,
                        help_text="Internal product code used by manufacturer",
                        max_length=100,
                        verbose_name="Manufacturer Product Code",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        help_text="Version number of this SDS (e.g., 1.0, 2.3)",
                        max_length=50,
                        verbose_name="SDS Version",
                    ),
                ),
                (
                    "revision_date",
                    models.DateField(
                        help_text="Date when this SDS version was created",
                        verbose_name="Revision Date",
                    ),
                ),
                (
                    "supersedes_version",
                    models.CharField(
                        blank=True,
                        help_text="Previous version this SDS replaces",
                        max_length=50,
                        verbose_name="Supersedes Version",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("EXPIRED", "Expired"),
                            ("SUPERSEDED", "Superseded"),
                            ("UNDER_REVIEW", "Under Review"),
                            ("DRAFT", "Draft"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when this SDS expires (if applicable)",
                        null=True,
                        verbose_name="Expiration Date",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("EN", "English"),
                            ("FR", "French (Français)"),
                            ("ES", "Spanish (Español)"),
                            ("DE", "German (Deutsch)"),
                            ("IT", "Italian (Italiano)"),
                            ("PT", "Portuguese (Português)"),
                            ("NL", "Dutch (Nederlands)"),
                            ("SV", "Swedish (Svenska)"),
                            ("NO", "Norwegian (Norsk)"),
                            ("DA", "Danish (Dansk)"),
                        ],
                        db_index=True,
                        default="EN",
                        max_length=2,
                        verbose_name="Language",
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="ISO country code for regulatory jurisdiction",
                        max_length=2,
                        verbose_name="Country Code",
                    ),
                ),
                (
                    "regulatory_standard",
                    models.CharField(
                        default="GHS",
                        help_text="Standard this SDS complies with (e.g., GHS, OSHA, EU CLP)",
                        max_length=100,
                        verbose_name="Regulatory Standard",
                    ),
                ),
                (
                    "emergency_contacts",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Emergency contact numbers and information",
                        verbose_name="Emergency Contact Information",
                    ),
                ),
                (
                    "flash_point_celsius",
                    models.FloatField(
                        blank=True,
                        help_text="Flash point in Celsius",
                        null=True,
                        verbose_name="Flash Point (°C)",
                    ),
                ),
                (
                    "auto_ignition_temp_celsius",
                    models.FloatField(
                        blank=True,
                        help_text="Auto-ignition temperature in Celsius",
                        null=True,
                        verbose_name="Auto-Ignition Temperature (°C)",
                    ),
                ),
                (
                    "physical_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SOLID", "Solid"),
                            ("LIQUID", "Liquid"),
                            ("GAS", "Gas"),
                            ("AEROSOL", "Aerosol"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Physical State",
                    ),
                ),
                (
                    "color",
                    models.CharField(blank=True, max_length=100, verbose_name="Color"),
                ),
                (
                    "odor",
                    models.CharField(blank=True, max_length=100, verbose_name="Odor"),
                ),
                (
                    "ph_value_min",
                    models.FloatField(
                        blank=True,
                        help_text="Minimum pH value for Class 8 corrosive materials (0-14 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(14.0),
                        ],
                        verbose_name="pH Value (Minimum)",
                    ),
                ),
                (
                    "ph_value_max",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum pH value for Class 8 corrosive materials (0-14 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(14.0),
                        ],
                        verbose_name="pH Value (Maximum)",
                    ),
                ),
                (
                    "ph_measurement_conditions",
                    models.CharField(
                        blank=True,
                        help_text="Temperature, concentration, and other conditions during pH measurement",
                        max_length=200,
                        verbose_name="pH Measurement Conditions",
                    ),
                ),
                (
                    "ph_extraction_confidence",
                    models.FloatField(
                        blank=True,
                        help_text="AI extraction confidence score (0.0-1.0) for pH data quality",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="pH Extraction Confidence",
                    ),
                ),
                (
                    "ph_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SDS_EXTRACTED", "Extracted from SDS Document"),
                            ("MANUAL_ENTRY", "Manually Entered"),
                            ("CALCULATED", "Calculated from Chemical Properties"),
                            ("LITERATURE", "Literature Value"),
                            ("MANUFACTURER", "Manufacturer Specification"),
                        ],
                        help_text="Source of the pH information",
                        max_length=50,
                        verbose_name="pH Data Source",
                    ),
                ),
                (
                    "ph_updated_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When pH information was last updated",
                        null=True,
                        verbose_name="pH Data Last Updated",
                    ),
                ),
                (
                    "hazard_statements",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of H-codes and statements",
                        verbose_name="Hazard Statements",
                    ),
                ),
                (
                    "precautionary_statements",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of P-codes and statements",
                        verbose_name="Precautionary Statements",
                    ),
                ),
                (
                    "first_aid_measures",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="First aid instructions by exposure route",
                        verbose_name="First Aid Measures",
                    ),
                ),
                (
                    "fire_fighting_measures",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Fire fighting procedures and extinguishing media",
                        verbose_name="Fire Fighting Measures",
                    ),
                ),
                (
                    "spill_cleanup_procedures",
                    models.TextField(
                        blank=True,
                        help_text="Procedures for cleaning up spills",
                        verbose_name="Spill Cleanup Procedures",
                    ),
                ),
                (
                    "storage_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Special storage conditions and requirements",
                        verbose_name="Storage Requirements",
                    ),
                ),
                (
                    "handling_precautions",
                    models.TextField(
                        blank=True,
                        help_text="Safe handling procedures",
                        verbose_name="Handling Precautions",
                    ),
                ),
                (
                    "disposal_methods",
                    models.TextField(
                        blank=True,
                        help_text="Safe disposal procedures",
                        verbose_name="Disposal Methods",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_sds_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dangerous_good",
                    models.ForeignKey(
                        help_text="The dangerous good this SDS applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="safety_data_sheets",
                        to="dangerous_goods.dangerousgood",
                        verbose_name="Associated Dangerous Good",
                    ),
                ),
            ],
            options={
                "verbose_name": "Safety Data Sheet",
                "verbose_name_plural": "Safety Data Sheets",
                "ordering": ["-revision_date", "-version"],
            },
        ),
        migrations.CreateModel(
            name="SDSAccessLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "access_type",
                    models.CharField(
                        choices=[
                            ("VIEW", "Viewed"),
                            ("DOWNLOAD", "Downloaded"),
                            ("PRINT", "Printed"),
                            ("SEARCH", "Found in Search"),
                        ],
                        db_index=True,
                        max_length=20,
                        verbose_name="Access Type",
                    ),
                ),
                (
                    "access_context",
                    models.CharField(
                        choices=[
                            ("PLANNING", "Shipment Planning"),
                            ("INSPECTION", "Inspection Process"),
                            ("EMERGENCY", "Emergency Response"),
                            ("TRAINING", "Training"),
                            ("COMPLIANCE", "Compliance Check"),
                            ("GENERAL", "General Reference"),
                        ],
                        default="GENERAL",
                        max_length=50,
                        verbose_name="Access Context",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP Address"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="User Agent")),
                ("accessed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "sds",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to="sds.safetydatasheet",
                        verbose_name="Safety Data Sheet",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sds_access_logs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "SDS Access Log",
                "verbose_name_plural": "SDS Access Logs",
                "ordering": ["-accessed_at"],
            },
        ),
        migrations.CreateModel(
            name="SDSRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Specific product name for SDS request",
                        max_length=255,
                        verbose_name="Product Name",
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Manufacturer"
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("EN", "English"),
                            ("FR", "French (Français)"),
                            ("ES", "Spanish (Español)"),
                            ("DE", "German (Deutsch)"),
                            ("IT", "Italian (Italiano)"),
                            ("PT", "Portuguese (Português)"),
                            ("NL", "Dutch (Nederlands)"),
                            ("SV", "Swedish (Svenska)"),
                            ("NO", "Norwegian (Norsk)"),
                            ("DA", "Danish (Dansk)"),
                        ],
                        default="EN",
                        max_length=2,
                        verbose_name="Requested Language",
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="Country for regulatory compliance",
                        max_length=2,
                        verbose_name="Country Code",
                    ),
                ),
                (
                    "urgency",
                    models.CharField(
                        choices=[
                            ("LOW", "Low - General Reference"),
                            ("MEDIUM", "Medium - Planned Shipment"),
                            ("HIGH", "High - Immediate Shipment"),
                            ("CRITICAL", "Critical - Emergency Response"),
                        ],
                        default="MEDIUM",
                        max_length=20,
                        verbose_name="Urgency",
                    ),
                ),
                (
                    "justification",
                    models.TextField(
                        help_text="Reason for SDS request", verbose_name="Justification"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("UNAVAILABLE", "Unavailable"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                        verbose_name="Request Status",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "dangerous_good",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sds_requests",
                        to="dangerous_goods.dangerousgood",
                        verbose_name="Dangerous Good",
                    ),
                ),
                (
                    "fulfilled_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fulfills_requests",
                        to="sds.safetydatasheet",
                        verbose_name="Fulfilled by SDS",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sds_requests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Requested By",
                    ),
                ),
            ],
            options={
                "verbose_name": "SDS Request",
                "verbose_name_plural": "SDS Requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["dangerous_good", "status"],
                name="sds_safetyd_dangero_8e5751_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["manufacturer", "product_name"],
                name="sds_safetyd_manufac_2608ff_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["status", "expiration_date"],
                name="sds_safetyd_status_311a06_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["language", "country_code"],
                name="sds_safetyd_languag_65a6a1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["version", "revision_date"],
                name="sds_safetyd_version_357375_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["ph_value_min", "ph_value_max"],
                name="sds_safetyd_ph_valu_d42759_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safetydatasheet",
            index=models.Index(
                fields=["dangerous_good", "ph_value_min"],
                name="sds_safetyd_dangero_54bf50_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="safetydatasheet",
            unique_together={("dangerous_good", "version", "language", "country_code")},
        ),
        migrations.AddIndex(
            model_name="sdsaccesslog",
            index=models.Index(
                fields=["sds", "accessed_at"], name="sds_sdsacce_sds_id_066109_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sdsaccesslog",
            index=models.Index(
                fields=["user", "access_type"], name="sds_sdsacce_user_id_0f94a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sdsaccesslog",
            index=models.Index(
                fields=["access_context", "accessed_at"],
                name="sds_sdsacce_access__a370a7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sdsrequest",
            index=models.Index(
                fields=["status", "urgency"], name="sds_sdsrequ_status_369010_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sdsrequest",
            index=models.Index(
                fields=["dangerous_good", "status"],
                name="sds_sdsrequ_dangero_2a07dc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sdsrequest",
            index=models.Index(
                fields=["requested_by", "status"], name="sds_sdsrequ_request_0e006b_idx"
            ),
        ),
    ]
