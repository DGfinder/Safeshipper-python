# Generated by Django 5.2.1 on 2025-07-14 09:59

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("companies", "0001_initial"),
        ("locations", "0002_alter_geolocation_options_and_more"),
        (
            "vehicles",
            "0003_rename_vehicles_sa_equipme_1k2l3m_idx_vehicles_sa_equipme_3dfb6c_idx_and_more",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CapacityListing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Listing title", max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "capacity_type",
                    models.CharField(
                        choices=[
                            ("WEIGHT_ONLY", "Weight Capacity Only"),
                            ("VOLUME_ONLY", "Volume Capacity Only"),
                            ("MIXED", "Weight + Volume Capacity"),
                            ("FTL", "Full Truck Load"),
                            ("LTL", "Less Than Truck Load"),
                        ],
                        default="MIXED",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active - Available for booking"),
                            ("PARTIALLY_BOOKED", "Partially Booked"),
                            ("FULLY_BOOKED", "Fully Booked"),
                            ("IN_TRANSIT", "In Transit"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("EXPIRED", "Expired"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "route_distance_km",
                    models.FloatField(
                        help_text="Total route distance in kilometers",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "available_weight_kg",
                    models.FloatField(
                        help_text="Available weight capacity in kg",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "available_volume_m3",
                    models.FloatField(
                        help_text="Available volume capacity in cubic meters",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cargo_length_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "cargo_width_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "cargo_height_cm",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "base_price_per_kg",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base price per kilogram",
                        max_digits=10,
                    ),
                ),
                (
                    "base_price_per_m3",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base price per cubic meter",
                        max_digits=10,
                    ),
                ),
                (
                    "flat_rate_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Flat rate for full capacity booking",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "demand_multiplier",
                    models.FloatField(
                        default=1.0,
                        help_text="Dynamic pricing multiplier based on demand",
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "surge_pricing_active",
                    models.BooleanField(
                        default=False,
                        help_text="Whether surge pricing is currently active",
                    ),
                ),
                ("pickup_time_earliest", models.DateTimeField(db_index=True)),
                ("pickup_time_latest", models.DateTimeField(db_index=True)),
                ("estimated_delivery_time", models.DateTimeField()),
                ("accepts_dangerous_goods", models.BooleanField(default=False)),
                (
                    "accepted_dg_classes",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of accepted dangerous goods classes",
                    ),
                ),
                ("temperature_controlled", models.BooleanField(default=False)),
                (
                    "temperature_range",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Temperature range: {'min': -20, 'max': 25}",
                    ),
                ),
                (
                    "equipment_features",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Available equipment: ['tailgate_lift', 'tracking', 'secure_storage']",
                    ),
                ),
                (
                    "insurance_coverage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Insurance coverage amount",
                        max_digits=12,
                    ),
                ),
                ("total_bookings", models.PositiveIntegerField(default=0)),
                ("confirmed_bookings", models.PositiveIntegerField(default=0)),
                (
                    "utilization_percentage",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "estimated_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "actual_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                ("listing_expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_booking_at", models.DateTimeField(blank=True, null=True)),
                (
                    "average_rating",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("total_ratings", models.PositiveIntegerField(default=0)),
                (
                    "carrier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capacity_listings",
                        to="companies.company",
                    ),
                ),
                (
                    "destination_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="destination_capacity_listings",
                        to="locations.geolocation",
                    ),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="capacity_listings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "origin_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="origin_capacity_listings",
                        to="locations.geolocation",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capacity_listings",
                        to="vehicles.vehicle",
                    ),
                ),
            ],
            options={
                "verbose_name": "Capacity Listing",
                "verbose_name_plural": "Capacity Listings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CapacityBooking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("CONFIRMED", "Confirmed"),
                            ("PAID", "Paid"),
                            ("IN_TRANSIT", "In Transit"),
                            ("DELIVERED", "Delivered"),
                            ("CANCELLED", "Cancelled"),
                            ("DISPUTED", "Disputed"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "booking_reference",
                    models.CharField(editable=False, max_length=100, unique=True),
                ),
                (
                    "booked_weight_kg",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "booked_volume_m3",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                ("items_description", models.TextField()),
                ("number_of_items", models.PositiveIntegerField()),
                (
                    "special_requirements",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Special handling requirements",
                    ),
                ),
                ("quoted_price", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "final_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "platform_fee",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("requested_pickup_time", models.DateTimeField()),
                ("confirmed_pickup_time", models.DateTimeField(blank=True, null=True)),
                ("actual_pickup_time", models.DateTimeField(blank=True, null=True)),
                ("actual_delivery_time", models.DateTimeField(blank=True, null=True)),
                (
                    "shipper_contact",
                    models.JSONField(help_text="Contact details for pickup/delivery"),
                ),
                ("delivery_instructions", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("tracking_url", models.URLField(blank=True)),
                (
                    "shipper_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "carrier_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback_notes", models.TextField(blank=True)),
                (
                    "booked_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="capacity_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "delivery_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_bookings",
                        to="locations.geolocation",
                    ),
                ),
                (
                    "pickup_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pickup_bookings",
                        to="locations.geolocation",
                    ),
                ),
                (
                    "shipper",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capacity_bookings",
                        to="companies.company",
                    ),
                ),
                (
                    "capacity_listing",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="capacity_marketplace.capacitylisting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Capacity Booking",
                "verbose_name_plural": "Capacity Bookings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MarketplaceMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily Metrics"),
                            ("WEEKLY", "Weekly Metrics"),
                            ("MONTHLY", "Monthly Metrics"),
                        ],
                        default="DAILY",
                        max_length=10,
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("total_capacity_listed_kg", models.FloatField(default=0)),
                ("total_capacity_booked_kg", models.FloatField(default=0)),
                (
                    "capacity_utilization_rate",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "total_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "platform_commission",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "average_price_per_kg",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("new_listings", models.PositiveIntegerField(default=0)),
                ("new_bookings", models.PositiveIntegerField(default=0)),
                ("confirmed_bookings", models.PositiveIntegerField(default=0)),
                ("cancelled_bookings", models.PositiveIntegerField(default=0)),
                ("active_carriers", models.PositiveIntegerField(default=0)),
                ("active_shippers", models.PositiveIntegerField(default=0)),
                ("new_carrier_signups", models.PositiveIntegerField(default=0)),
                ("new_shipper_signups", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "on_time_delivery_rate",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Marketplace Metrics",
                "verbose_name_plural": "Marketplace Metrics",
                "ordering": ["-date"],
                "indexes": [
                    models.Index(
                        fields=["metric_type", "date"],
                        name="capacity_ma_metric__742b7a_idx",
                    )
                ],
                "unique_together": {("metric_type", "date")},
            },
        ),
        migrations.CreateModel(
            name="PriceOptimization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "market_demand_score",
                    models.FloatField(
                        help_text="Market demand score (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "competitor_price_avg",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Average competitor price for similar routes",
                        max_digits=10,
                    ),
                ),
                (
                    "historical_booking_rate",
                    models.FloatField(
                        help_text="Historical booking rate percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "recommended_price_per_kg",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "recommended_price_per_m3",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "price_confidence_score",
                    models.FloatField(
                        help_text="Confidence in price recommendation (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "factors",
                    models.JSONField(
                        default=dict,
                        help_text="Factors influencing price: demand, competition, season, etc.",
                    ),
                ),
                (
                    "predicted_booking_probability",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "actual_booking_rate",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "capacity_listing",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_optimization",
                        to="capacity_marketplace.capacitylisting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Price Optimization",
                "verbose_name_plural": "Price Optimizations",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddIndex(
            model_name="capacitylisting",
            index=models.Index(
                fields=["status", "pickup_time_earliest"],
                name="capacity_ma_status_f959f1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="capacitylisting",
            index=models.Index(
                fields=["origin_location", "destination_location"],
                name="capacity_ma_origin__384b88_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="capacitylisting",
            index=models.Index(
                fields=["capacity_type", "available_weight_kg"],
                name="capacity_ma_capacit_f89113_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="capacitylisting",
            index=models.Index(
                fields=["accepts_dangerous_goods"],
                name="capacity_ma_accepts_9a278a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="capacitylisting",
            index=models.Index(
                fields=["listing_expires_at"], name="capacity_ma_listing_faad8d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="capacitybooking",
            index=models.Index(
                fields=["status", "created_at"], name="capacity_ma_status_16561d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="capacitybooking",
            index=models.Index(
                fields=["capacity_listing", "status"],
                name="capacity_ma_capacit_02b25c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="capacitybooking",
            index=models.Index(
                fields=["shipper", "status"], name="capacity_ma_shipper_0e4f22_idx"
            ),
        ),
    ]
