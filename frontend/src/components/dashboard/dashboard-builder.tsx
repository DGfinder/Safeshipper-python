'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useTheme } from '@/contexts/ThemeContext';
import { useAccessibility } from '@/contexts/AccessibilityContext';
import { cn } from '@/lib/utils';
import { toast } from 'react-hot-toast';
import {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DropResult,\n  DragStart,\n  DragUpdate,\n} from 'react-beautiful-dnd';\nimport {\n  BarChart3,\n  PieChart,\n  TrendingUp,\n  Activity,\n  Package,\n  Truck,\n  Users,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  MapPin,\n  Shield,\n  Bell,\n  FileText,\n  Calendar,\n  Target,\n  Zap,\n  Eye,\n  EyeOff,\n  Settings,\n  Plus,\n  Minus,\n  Copy,\n  Trash2,\n  Move,\n  Grid,\n  Layout,\n  Maximize2,\n  Minimize2,\n  MoreHorizontal,\n  Save,\n  Undo,\n  Redo,\n  Download,\n  Upload,\n  Share2,\n  Lock,\n  Unlock,\n  Palette,\n  Type,\n  Layers,\n  Filter,\n  Search,\n  Refresh,\n  ExternalLink,\n  Info,\n  HelpCircle,\n  ChevronDown,\n  ChevronUp,\n  ChevronLeft,\n  ChevronRight,\n  X,\n} from 'lucide-react';\n\n// Widget types and interfaces\nexport type WidgetType = \n  | 'kpi'\n  | 'chart'\n  | 'table'\n  | 'map'\n  | 'calendar'\n  | 'notifications'\n  | 'activity'\n  | 'weather'\n  | 'clock'\n  | 'iframe'\n  | 'text'\n  | 'image'\n  | 'separator';\n\nexport type ChartType = \n  | 'line'\n  | 'bar'\n  | 'pie'\n  | 'doughnut'\n  | 'area'\n  | 'scatter'\n  | 'radar'\n  | 'gauge'\n  | 'heatmap';\n\nexport interface WidgetConfig {\n  id: string;\n  type: WidgetType;\n  title: string;\n  description?: string;\n  position: {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n  };\n  config: {\n    // Chart specific\n    chartType?: ChartType;\n    dataSource?: string;\n    metrics?: string[];\n    filters?: Record<string, any>;\n    refreshInterval?: number;\n    \n    // KPI specific\n    value?: number | string;\n    unit?: string;\n    trend?: 'up' | 'down' | 'stable';\n    target?: number;\n    format?: 'number' | 'currency' | 'percentage';\n    \n    // Table specific\n    columns?: {\n      key: string;\n      label: string;\n      type: 'text' | 'number' | 'date' | 'status' | 'actions';\n      width?: number;\n    }[];\n    pagination?: boolean;\n    sorting?: boolean;\n    \n    // Map specific\n    center?: [number, number];\n    zoom?: number;\n    markers?: {\n      id: string;\n      position: [number, number];\n      title: string;\n      type: 'vehicle' | 'facility' | 'incident' | 'checkpoint';\n    }[];\n    \n    // Style config\n    backgroundColor?: string;\n    textColor?: string;\n    borderColor?: string;\n    borderWidth?: number;\n    borderRadius?: number;\n    padding?: number;\n    fontSize?: number;\n    fontWeight?: 'normal' | 'bold';\n    \n    // Behavior config\n    clickable?: boolean;\n    resizable?: boolean;\n    draggable?: boolean;\n    visible?: boolean;\n    \n    // Custom config\n    customProps?: Record<string, any>;\n  };\n  permissions?: {\n    view: string[];\n    edit: string[];\n    delete: string[];\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n}\n\nexport interface DashboardLayout {\n  id: string;\n  name: string;\n  description?: string;\n  widgets: WidgetConfig[];\n  settings: {\n    theme: 'light' | 'dark' | 'auto';\n    layout: 'grid' | 'freeform';\n    gridSize: number;\n    snapToGrid: boolean;\n    showGrid: boolean;\n    backgroundColor?: string;\n    backgroundImage?: string;\n    padding: number;\n    responsive: boolean;\n    breakpoints: {\n      mobile: number;\n      tablet: number;\n      desktop: number;\n    };\n  };\n  permissions: {\n    view: string[];\n    edit: string[];\n    share: string[];\n    delete: string[];\n  };\n  isPublic: boolean;\n  tags: string[];\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n}\n\n// Widget templates\nconst widgetTemplates: Record<WidgetType, Partial<WidgetConfig>> = {\n  kpi: {\n    type: 'kpi',\n    title: 'Key Performance Indicator',\n    position: { x: 0, y: 0, w: 3, h: 2 },\n    config: {\n      value: 0,\n      unit: '',\n      trend: 'stable',\n      format: 'number',\n      backgroundColor: '#f8fafc',\n      textColor: '#1f2937',\n      fontSize: 24,\n      fontWeight: 'bold',\n    },\n  },\n  chart: {\n    type: 'chart',\n    title: 'Chart Widget',\n    position: { x: 0, y: 0, w: 6, h: 4 },\n    config: {\n      chartType: 'line',\n      dataSource: 'shipments',\n      metrics: ['count'],\n      refreshInterval: 30000,\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n    },\n  },\n  table: {\n    type: 'table',\n    title: 'Data Table',\n    position: { x: 0, y: 0, w: 8, h: 6 },\n    config: {\n      columns: [\n        { key: 'id', label: 'ID', type: 'text' },\n        { key: 'name', label: 'Name', type: 'text' },\n        { key: 'status', label: 'Status', type: 'status' },\n      ],\n      pagination: true,\n      sorting: true,\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n    },\n  },\n  map: {\n    type: 'map',\n    title: 'Map View',\n    position: { x: 0, y: 0, w: 8, h: 6 },\n    config: {\n      center: [43.6532, -79.3832], // Toronto\n      zoom: 10,\n      markers: [],\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n    },\n  },\n  calendar: {\n    type: 'calendar',\n    title: 'Calendar',\n    position: { x: 0, y: 0, w: 6, h: 4 },\n    config: {\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n    },\n  },\n  notifications: {\n    type: 'notifications',\n    title: 'Notifications',\n    position: { x: 0, y: 0, w: 4, h: 6 },\n    config: {\n      refreshInterval: 10000,\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n    },\n  },\n  activity: {\n    type: 'activity',\n    title: 'Activity Feed',\n    position: { x: 0, y: 0, w: 4, h: 6 },\n    config: {\n      refreshInterval: 15000,\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n    },\n  },\n  weather: {\n    type: 'weather',\n    title: 'Weather',\n    position: { x: 0, y: 0, w: 3, h: 2 },\n    config: {\n      refreshInterval: 300000, // 5 minutes\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n    },\n  },\n  clock: {\n    type: 'clock',\n    title: 'Clock',\n    position: { x: 0, y: 0, w: 2, h: 2 },\n    config: {\n      backgroundColor: '#ffffff',\n      textColor: '#1f2937',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n      fontSize: 20,\n    },\n  },\n  iframe: {\n    type: 'iframe',\n    title: 'Embedded Content',\n    position: { x: 0, y: 0, w: 6, h: 4 },\n    config: {\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      customProps: {\n        src: '',\n        allowfullscreen: true,\n      },\n    },\n  },\n  text: {\n    type: 'text',\n    title: 'Text Widget',\n    position: { x: 0, y: 0, w: 4, h: 2 },\n    config: {\n      backgroundColor: '#ffffff',\n      textColor: '#1f2937',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 16,\n      fontSize: 14,\n      fontWeight: 'normal',\n      customProps: {\n        content: 'Enter your text here...',\n        markdown: false,\n      },\n    },\n  },\n  image: {\n    type: 'image',\n    title: 'Image Widget',\n    position: { x: 0, y: 0, w: 4, h: 3 },\n    config: {\n      backgroundColor: '#ffffff',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      borderRadius: 8,\n      padding: 8,\n      customProps: {\n        src: '',\n        alt: '',\n        fit: 'cover',\n      },\n    },\n  },\n  separator: {\n    type: 'separator',\n    title: 'Separator',\n    position: { x: 0, y: 0, w: 12, h: 1 },\n    config: {\n      backgroundColor: 'transparent',\n      borderColor: '#e5e7eb',\n      borderWidth: 1,\n      customProps: {\n        orientation: 'horizontal',\n        style: 'solid',\n      },\n    },\n  },\n};\n\n// Widget icons\nconst widgetIcons: Record<WidgetType, React.ComponentType<any>> = {\n  kpi: Target,\n  chart: BarChart3,\n  table: Grid,\n  map: MapPin,\n  calendar: Calendar,\n  notifications: Bell,\n  activity: Activity,\n  weather: Zap,\n  clock: Clock,\n  iframe: ExternalLink,\n  text: Type,\n  image: FileText,\n  separator: Minus,\n};\n\n// Main dashboard builder component\ninterface DashboardBuilderProps {\n  layout?: DashboardLayout;\n  onSave?: (layout: DashboardLayout) => void;\n  onCancel?: () => void;\n  readOnly?: boolean;\n  className?: string;\n}\n\nexport function DashboardBuilder({\n  layout,\n  onSave,\n  onCancel,\n  readOnly = false,\n  className,\n}: DashboardBuilderProps) {\n  const [currentLayout, setCurrentLayout] = useState<DashboardLayout>(\n    layout || {\n      id: 'new-dashboard',\n      name: 'New Dashboard',\n      description: '',\n      widgets: [],\n      settings: {\n        theme: 'light',\n        layout: 'grid',\n        gridSize: 20,\n        snapToGrid: true,\n        showGrid: true,\n        padding: 16,\n        responsive: true,\n        breakpoints: {\n          mobile: 480,\n          tablet: 768,\n          desktop: 1024,\n        },\n      },\n      permissions: {\n        view: ['all'],\n        edit: ['admin'],\n        share: ['admin'],\n        delete: ['admin'],\n      },\n      isPublic: false,\n      tags: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: 'current-user',\n    }\n  );\n  \n  const [selectedWidget, setSelectedWidget] = useState<string | null>(null);\n  const [draggedWidget, setDraggedWidget] = useState<WidgetType | null>(null);\n  const [showWidgetPanel, setShowWidgetPanel] = useState(true);\n  const [showPropertiesPanel, setShowPropertiesPanel] = useState(true);\n  const [previewMode, setPreviewMode] = useState(false);\n  const [history, setHistory] = useState<DashboardLayout[]>([currentLayout]);\n  const [historyIndex, setHistoryIndex] = useState(0);\n  \n  const { isDark } = useTheme();\n  const { preferences } = useAccessibility();\n\n  // History management\n  const addToHistory = useCallback((newLayout: DashboardLayout) => {\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push({ ...newLayout, updatedAt: new Date() });\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }, [history, historyIndex]);\n\n  const undo = useCallback(() => {\n    if (historyIndex > 0) {\n      setHistoryIndex(historyIndex - 1);\n      setCurrentLayout(history[historyIndex - 1]);\n    }\n  }, [history, historyIndex]);\n\n  const redo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      setHistoryIndex(historyIndex + 1);\n      setCurrentLayout(history[historyIndex + 1]);\n    }\n  }, [history, historyIndex]);\n\n  // Widget management\n  const addWidget = useCallback((type: WidgetType) => {\n    const template = widgetTemplates[type];\n    if (!template) return;\n\n    const newWidget: WidgetConfig = {\n      id: `widget-${Date.now()}`,\n      ...template,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: 'current-user',\n    } as WidgetConfig;\n\n    const newLayout = {\n      ...currentLayout,\n      widgets: [...currentLayout.widgets, newWidget],\n    };\n\n    setCurrentLayout(newLayout);\n    addToHistory(newLayout);\n    setSelectedWidget(newWidget.id);\n    toast.success(`${template.title} added`);\n  }, [currentLayout, addToHistory]);\n\n  const updateWidget = useCallback((id: string, updates: Partial<WidgetConfig>) => {\n    const newLayout = {\n      ...currentLayout,\n      widgets: currentLayout.widgets.map(widget => \n        widget.id === id \n          ? { ...widget, ...updates, updatedAt: new Date() }\n          : widget\n      ),\n    };\n\n    setCurrentLayout(newLayout);\n    addToHistory(newLayout);\n  }, [currentLayout, addToHistory]);\n\n  const deleteWidget = useCallback((id: string) => {\n    const newLayout = {\n      ...currentLayout,\n      widgets: currentLayout.widgets.filter(widget => widget.id !== id),\n    };\n\n    setCurrentLayout(newLayout);\n    addToHistory(newLayout);\n    setSelectedWidget(null);\n    toast.success('Widget deleted');\n  }, [currentLayout, addToHistory]);\n\n  const duplicateWidget = useCallback((id: string) => {\n    const widget = currentLayout.widgets.find(w => w.id === id);\n    if (!widget) return;\n\n    const newWidget: WidgetConfig = {\n      ...widget,\n      id: `widget-${Date.now()}`,\n      position: {\n        ...widget.position,\n        x: widget.position.x + 1,\n        y: widget.position.y + 1,\n      },\n      title: `${widget.title} (Copy)`,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const newLayout = {\n      ...currentLayout,\n      widgets: [...currentLayout.widgets, newWidget],\n    };\n\n    setCurrentLayout(newLayout);\n    addToHistory(newLayout);\n    setSelectedWidget(newWidget.id);\n    toast.success('Widget duplicated');\n  }, [currentLayout, addToHistory]);\n\n  // Drag and drop handlers\n  const handleDragStart = useCallback((start: DragStart) => {\n    // Handle drag start\n  }, []);\n\n  const handleDragUpdate = useCallback((update: DragUpdate) => {\n    // Handle drag update\n  }, []);\n\n  const handleDragEnd = useCallback((result: DropResult) => {\n    const { destination, source, draggableId } = result;\n    \n    if (!destination) return;\n    \n    if (destination.droppableId === 'dashboard' && source.droppableId === 'widget-palette') {\n      // Adding new widget from palette\n      const widgetType = draggableId as WidgetType;\n      addWidget(widgetType);\n    } else if (destination.droppableId === 'dashboard' && source.droppableId === 'dashboard') {\n      // Reordering widgets\n      const newWidgets = Array.from(currentLayout.widgets);\n      const [reorderedWidget] = newWidgets.splice(source.index, 1);\n      newWidgets.splice(destination.index, 0, reorderedWidget);\n      \n      const newLayout = {\n        ...currentLayout,\n        widgets: newWidgets,\n      };\n      \n      setCurrentLayout(newLayout);\n      addToHistory(newLayout);\n    }\n  }, [currentLayout, addWidget, addToHistory]);\n\n  // Save dashboard\n  const handleSave = useCallback(() => {\n    if (onSave) {\n      onSave(currentLayout);\n      toast.success('Dashboard saved successfully');\n    }\n  }, [currentLayout, onSave]);\n\n  // Widget palette component\n  const WidgetPalette = () => (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <Layers className=\"h-5 w-5\" />\n          Widget Palette\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <Droppable droppableId=\"widget-palette\" isDropDisabled={true}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"space-y-2 p-4\"\n            >\n              {Object.entries(widgetTemplates).map(([type, template], index) => {\n                const Icon = widgetIcons[type as WidgetType];\n                return (\n                  <Draggable\n                    key={type}\n                    draggableId={type}\n                    index={index}\n                    isDragDisabled={readOnly}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        className={cn(\n                          'flex items-center gap-3 p-3 rounded-lg border-2 border-dashed border-neutral-200 hover:border-primary-300 hover:bg-primary-50 transition-colors cursor-move',\n                          snapshot.isDragging && 'border-primary-500 bg-primary-100',\n                          readOnly && 'cursor-not-allowed opacity-50'\n                        )}\n                        onClick={() => !readOnly && addWidget(type as WidgetType)}\n                      >\n                        <Icon className=\"h-5 w-5 text-neutral-600\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-neutral-900\">\n                            {template.title}\n                          </p>\n                          <p className=\"text-xs text-neutral-600\">\n                            {type.charAt(0).toUpperCase() + type.slice(1)}\n                          </p>\n                        </div>\n                        <Plus className=\"h-4 w-4 text-neutral-400\" />\n                      </div>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </CardContent>\n    </Card>\n  );\n\n  // Properties panel component\n  const PropertiesPanel = () => {\n    const selectedWidgetData = selectedWidget \n      ? currentLayout.widgets.find(w => w.id === selectedWidget)\n      : null;\n\n    return (\n      <Card className=\"h-full\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Properties\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          {selectedWidgetData ? (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"widget-title\">Title</Label>\n                <Input\n                  id=\"widget-title\"\n                  value={selectedWidgetData.title}\n                  onChange={(e) => updateWidget(selectedWidget!, { title: e.target.value })}\n                  disabled={readOnly}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"widget-description\">Description</Label>\n                <Input\n                  id=\"widget-description\"\n                  value={selectedWidgetData.description || ''}\n                  onChange={(e) => updateWidget(selectedWidget!, { description: e.target.value })}\n                  disabled={readOnly}\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"widget-width\">Width</Label>\n                  <Input\n                    id=\"widget-width\"\n                    type=\"number\"\n                    value={selectedWidgetData.position.w}\n                    onChange={(e) => updateWidget(selectedWidget!, {\n                      position: { ...selectedWidgetData.position, w: parseInt(e.target.value) }\n                    })}\n                    disabled={readOnly}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"widget-height\">Height</Label>\n                  <Input\n                    id=\"widget-height\"\n                    type=\"number\"\n                    value={selectedWidgetData.position.h}\n                    onChange={(e) => updateWidget(selectedWidget!, {\n                      position: { ...selectedWidgetData.position, h: parseInt(e.target.value) }\n                    })}\n                    disabled={readOnly}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => duplicateWidget(selectedWidget!)}\n                  disabled={readOnly}\n                >\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Duplicate\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => deleteWidget(selectedWidget!)}\n                  disabled={readOnly}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center text-neutral-500 py-8\">\n              <Settings className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>Select a widget to edit its properties</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Dashboard canvas component\n  const DashboardCanvas = () => (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Layout className=\"h-5 w-5\" />\n            {currentLayout.name}\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPreviewMode(!previewMode)}\n            >\n              {previewMode ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              {previewMode ? 'Exit Preview' : 'Preview'}\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <Droppable droppableId=\"dashboard\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className={cn(\n                'min-h-[600px] rounded-lg border-2 border-dashed border-neutral-200 relative',\n                snapshot.isDraggingOver && 'border-primary-500 bg-primary-50',\n                currentLayout.settings.showGrid && 'bg-grid-pattern'\n              )}\n              style={{\n                backgroundSize: `${currentLayout.settings.gridSize}px ${currentLayout.settings.gridSize}px`,\n                padding: currentLayout.settings.padding,\n              }}\n            >\n              {currentLayout.widgets.map((widget, index) => (\n                <Draggable\n                  key={widget.id}\n                  draggableId={widget.id}\n                  index={index}\n                  isDragDisabled={readOnly || previewMode}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      className={cn(\n                        'absolute border-2 border-transparent rounded-lg cursor-pointer transition-all',\n                        selectedWidget === widget.id && 'border-primary-500 ring-2 ring-primary-200',\n                        snapshot.isDragging && 'z-50 rotate-3 scale-105',\n                        !previewMode && 'hover:border-primary-300'\n                      )}\n                      style={{\n                        left: widget.position.x * currentLayout.settings.gridSize,\n                        top: widget.position.y * currentLayout.settings.gridSize,\n                        width: widget.position.w * currentLayout.settings.gridSize,\n                        height: widget.position.h * currentLayout.settings.gridSize,\n                        backgroundColor: widget.config.backgroundColor,\n                        borderColor: widget.config.borderColor,\n                        borderWidth: widget.config.borderWidth,\n                        borderRadius: widget.config.borderRadius,\n                        padding: widget.config.padding,\n                        ...provided.draggableProps.style,\n                      }}\n                      onClick={() => !previewMode && setSelectedWidget(widget.id)}\n                    >\n                      {!previewMode && (\n                        <div\n                          {...provided.dragHandleProps}\n                          className=\"absolute -top-6 left-0 right-0 h-6 bg-primary-600 text-white text-xs px-2 rounded-t flex items-center justify-between opacity-0 hover:opacity-100 transition-opacity\"\n                        >\n                          <span className=\"truncate\">{widget.title}</span>\n                          <div className=\"flex items-center gap-1\">\n                            <Move className=\"h-3 w-3\" />\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                deleteWidget(widget.id);\n                              }}\n                              className=\"hover:bg-red-500 p-0.5 rounded\"\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                      \n                      <WidgetRenderer widget={widget} previewMode={previewMode} />\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n              \n              {currentLayout.widgets.length === 0 && (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center text-neutral-500\">\n                    <Grid className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-lg font-medium\">Your dashboard is empty</p>\n                    <p className=\"text-sm\">Drag widgets from the palette to get started</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </Droppable>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className={cn('h-screen bg-surface-background', className)}>\n      <DragDropContext\n        onDragStart={handleDragStart}\n        onDragUpdate={handleDragUpdate}\n        onDragEnd={handleDragEnd}\n      >\n        {/* Header */}\n        <div className=\"border-b border-surface-border bg-surface-card px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <h1 className=\"text-xl font-semibold text-surface-foreground\">\n                Dashboard Builder\n              </h1>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={undo}\n                  disabled={historyIndex === 0}\n                >\n                  <Undo className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={redo}\n                  disabled={historyIndex === history.length - 1}\n                >\n                  <Redo className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowWidgetPanel(!showWidgetPanel)}\n              >\n                <Layers className=\"h-4 w-4 mr-2\" />\n                {showWidgetPanel ? 'Hide' : 'Show'} Widgets\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowPropertiesPanel(!showPropertiesPanel)}\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                {showPropertiesPanel ? 'Hide' : 'Show'} Properties\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={onCancel}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={readOnly}>\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Main content */}\n        <div className=\"flex h-[calc(100vh-70px)]\">\n          {/* Widget palette */}\n          {showWidgetPanel && (\n            <div className=\"w-64 border-r border-surface-border bg-surface-card p-4\">\n              <WidgetPalette />\n            </div>\n          )}\n          \n          {/* Dashboard canvas */}\n          <div className=\"flex-1 p-4\">\n            <DashboardCanvas />\n          </div>\n          \n          {/* Properties panel */}\n          {showPropertiesPanel && (\n            <div className=\"w-64 border-l border-surface-border bg-surface-card p-4\">\n              <PropertiesPanel />\n            </div>\n          )}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}\n\n// Widget renderer component\ninterface WidgetRendererProps {\n  widget: WidgetConfig;\n  previewMode: boolean;\n}\n\nfunction WidgetRenderer({ widget, previewMode }: WidgetRendererProps) {\n  const renderWidget = () => {\n    switch (widget.type) {\n      case 'kpi':\n        return (\n          <div className=\"h-full flex flex-col items-center justify-center\">\n            <div className=\"text-2xl font-bold\" style={{ color: widget.config.textColor }}>\n              {widget.config.value}\n            </div>\n            <div className=\"text-sm text-neutral-600 mt-1\">\n              {widget.title}\n            </div>\n          </div>\n        );\n      \n      case 'chart':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center text-neutral-500\">\n              <BarChart3 className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">{widget.config.chartType} Chart</p>\n            </div>\n          </div>\n        );\n      \n      case 'table':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center text-neutral-500\">\n              <Grid className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Data Table</p>\n            </div>\n          </div>\n        );\n      \n      case 'map':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center text-neutral-500\">\n              <MapPin className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Map View</p>\n            </div>\n          </div>\n        );\n      \n      case 'text':\n        return (\n          <div className=\"h-full p-2\">\n            <div \n              className=\"text-sm\"\n              style={{ \n                color: widget.config.textColor,\n                fontSize: widget.config.fontSize,\n                fontWeight: widget.config.fontWeight \n              }}\n            >\n              {widget.config.customProps?.content || 'Enter your text here...'}\n            </div>\n          </div>\n        );\n      \n      case 'clock':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Clock className=\"h-8 w-8 mx-auto mb-2 text-neutral-500\" />\n              <div className=\"text-lg font-mono\">\n                {new Date().toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        );\n      \n      default:\n        const Icon = widgetIcons[widget.type] || Package;\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center text-neutral-500\">\n              <Icon className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">{widget.title}</p>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"h-full w-full overflow-hidden\">\n      {renderWidget()}\n    </div>\n  );\n}\n\n// Dashboard preview component\ninterface DashboardPreviewProps {\n  layout: DashboardLayout;\n  className?: string;\n}\n\nexport function DashboardPreview({ layout, className }: DashboardPreviewProps) {\n  return (\n    <div className={cn('bg-surface-background p-4', className)}>\n      <div \n        className=\"relative rounded-lg border border-surface-border\"\n        style={{\n          backgroundColor: layout.settings.backgroundColor,\n          padding: layout.settings.padding,\n          minHeight: '600px',\n        }}\n      >\n        {layout.widgets.map((widget) => (\n          <div\n            key={widget.id}\n            className=\"absolute rounded-lg\"\n            style={{\n              left: widget.position.x * layout.settings.gridSize,\n              top: widget.position.y * layout.settings.gridSize,\n              width: widget.position.w * layout.settings.gridSize,\n              height: widget.position.h * layout.settings.gridSize,\n              backgroundColor: widget.config.backgroundColor,\n              borderColor: widget.config.borderColor,\n              borderWidth: widget.config.borderWidth,\n              borderRadius: widget.config.borderRadius,\n              padding: widget.config.padding,\n            }}\n          >\n            <WidgetRenderer widget={widget} previewMode={true} />\n          </div>\n        ))}\n        \n        {layout.widgets.length === 0 && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center text-neutral-500\">\n              <Layout className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium\">Dashboard is empty</p>\n              <p className=\"text-sm\">No widgets configured</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}