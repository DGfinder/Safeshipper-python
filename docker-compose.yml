version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: safeshipper
      POSTGRES_USER: safeshipper
      POSTGRES_PASSWORD: safeshipper123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U safeshipper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://safeshipper:safeshipper123@db:5432/safeshipper
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-here-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate --settings=safeshipper_core.docker_settings &&
             python manage.py collectstatic --noinput --settings=safeshipper_core.docker_settings &&
             python manage.py runserver 0.0.0.0:8000 --settings=safeshipper_core.docker_settings"

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://safeshipper:safeshipper123@db:5432/safeshipper
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-here-change-in-production
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "export DJANGO_SETTINGS_MODULE=safeshipper_core.docker_settings &&
             celery -A safeshipper_core worker --loglevel=info"

  # Next.js Frontend (temporarily disabled)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - /app/.next
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - backend
  #   command: npm run dev

volumes:
  postgres_data:
  static_volume:
  media_volume: 