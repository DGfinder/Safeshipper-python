/**
 * EPG Detail Screen
 * Displays detailed emergency procedure guide information
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  ActivityIndicator,
  TouchableOpacity,
  Alert,
  Share,
  Linking,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRoute, useNavigation } from '@react-navigation/native';

import { apiService } from '../services/apiService';
import { EmergencyProcedureGuide } from '../types/EPG';

type RouteParams = {
  epgId: string;
};

const EPGDetailScreen: React.FC = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { epgId } = route.params as RouteParams;
  
  const [epg, setEpg] = useState<EmergencyProcedureGuide | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadEPGDetails();
  }, [epgId]);

  const loadEPGDetails = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await apiService.getEmergencyProcedureGuide(epgId);
      
      if (response.success && response.data) {
        setEpg(response.data);
      } else {
        throw new Error(response.error || 'Failed to load EPG details');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to load EPG details';
      setError(errorMessage);
      Alert.alert('Error', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleShare = async () => {
    if (!epg) return;
    
    try {
      const shareContent = `${epg.title}\n\nEPG Number: ${epg.epg_number}\nHazard Class: ${epg.hazard_class}\n\nImmediate Actions:\n${epg.immediate_actions}\n\nGenerated by SafeShipper`;
      
      await Share.share({
        message: shareContent,
        title: epg.title,
      });
    } catch (error) {
      console.error('Error sharing EPG:', error);
    }
  };

  const handleCallEmergency = (phoneNumber: string) => {
    Alert.alert(
      'Call Emergency Contact',
      `Do you want to call ${phoneNumber}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Call', 
          onPress: () => Linking.openURL(`tel:${phoneNumber}`) 
        }
      ]
    );
  };

  const getSeverityColor = (severity: string): string => {
    switch (severity) {
      case 'LOW': return '#10B981';
      case 'MEDIUM': return '#F59E0B';
      case 'HIGH': return '#EF4444';
      case 'CRITICAL': return '#DC2626';
      default: return '#6B7280';
    }
  };

  const renderSection = (title: string, content: string, isEmergency?: boolean) => {
    if (!content || content.trim() === '') return null;
    
    return (
      <View style={[styles.section, isEmergency && styles.emergencySection]}>
        <Text style={[styles.sectionTitle, isEmergency && styles.emergencySectionTitle]}>
          {isEmergency && '🚨 '}{title}
        </Text>
        <Text style={[styles.sectionContent, isEmergency && styles.emergencySectionContent]}>
          {content}
        </Text>
      </View>
    );
  };

  const renderDistances = (title: string, distances: any) => {
    if (!distances || Object.keys(distances).length === 0) return null;
    
    return (
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>{title}</Text>
        {Object.entries(distances).map(([key, value]: [string, any]) => (
          <View key={key} style={styles.distanceItem}>
            <Text style={styles.distanceLabel}>
              {key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}:
            </Text>
            {typeof value === 'object' ? (
              Object.entries(value).map(([subKey, subValue]: [string, any]) => (
                <Text key={subKey} style={styles.distanceValue}>
                  {subKey}: {subValue}m
                </Text>
              ))
            ) : (
              <Text style={styles.distanceValue}>{value}m</Text>
            )}
          </View>
        ))}
      </View>
    );
  };

  const renderEmergencyContacts = () => {
    if (!epg?.emergency_contacts || Object.keys(epg.emergency_contacts).length === 0) return null;
    
    return (
      <View style={[styles.section, styles.emergencySection]}>
        <Text style={[styles.sectionTitle, styles.emergencySectionTitle]}>
          📞 Emergency Contacts
        </Text>
        {Object.entries(epg.emergency_contacts).map(([country, contacts]) => (
          <View key={country} style={styles.contactGroup}>
            <Text style={styles.contactCountry}>{country}</Text>
            {Object.entries(contacts).map(([type, number]: [string, any]) => (
              <TouchableOpacity
                key={type}
                style={styles.contactItem}
                onPress={() => handleCallEmergency(number)}
              >
                <Text style={styles.contactType}>
                  {type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}:
                </Text>
                <Text style={styles.contactNumber}>{number}</Text>
              </TouchableOpacity>
            ))}
          </View>
        ))}
      </View>
    );
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#3B82F6" />
          <Text style={styles.loadingText}>Loading EPG Details...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (error || !epg) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.errorContainer}>
          <Text style={styles.errorTitle}>Unable to Load EPG</Text>
          <Text style={styles.errorMessage}>{error || 'EPG not found'}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={loadEPGDetails}>
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerTop}>
            <Text style={styles.epgNumber}>{epg.epg_number}</Text>
            <TouchableOpacity style={styles.shareButton} onPress={handleShare}>
              <Text style={styles.shareButtonText}>📤 Share</Text>
            </TouchableOpacity>
          </View>
          
          <Text style={styles.title}>{epg.title}</Text>
          
          <View style={styles.badges}>
            <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(epg.severity_level) }]}>
              <Text style={styles.badgeText}>{epg.severity_level_display}</Text>
            </View>
            <View style={styles.hazardBadge}>
              <Text style={styles.badgeText}>Class {epg.hazard_class}</Text>
            </View>
          </View>

          {epg.subsidiary_risks.length > 0 && (
            <View style={styles.subsidiaryRisks}>
              <Text style={styles.subsidiaryRisksLabel}>Subsidiary Risks:</Text>
              <Text style={styles.subsidiaryRisksValue}>
                {epg.subsidiary_risks.map(risk => `Class ${risk}`).join(', ')}
              </Text>
            </View>
          )}

          <View style={styles.emergencyTypes}>
            <Text style={styles.emergencyTypesLabel}>Emergency Types:</Text>
            <View style={styles.emergencyTypesContainer}>
              {epg.emergency_types.map((type, index) => (
                <View key={index} style={styles.emergencyTypePill}>
                  <Text style={styles.emergencyTypeText}>
                    {type.replace(/_/g, ' ')}
                  </Text>
                </View>
              ))}
            </View>
          </View>
        </View>

        {/* Emergency Procedures */}
        {renderSection('Immediate Actions', epg.immediate_actions, true)}
        {renderSection('Personal Protection', epg.personal_protection)}
        {renderSection('Fire Procedures', epg.fire_procedures)}
        {renderSection('Spill Procedures', epg.spill_procedures)}
        {renderSection('Medical Procedures', epg.medical_procedures)}
        {renderSection('Evacuation Procedures', epg.evacuation_procedures)}
        {renderSection('Notification Requirements', epg.notification_requirements)}

        {/* Distances */}
        {renderDistances('Isolation Distances', epg.isolation_distances)}
        {renderDistances('Protective Action Distances', epg.protective_action_distances)}

        {/* Environmental Precautions */}
        {renderSection('Environmental Precautions', epg.environmental_precautions)}
        {renderSection('Water Pollution Response', epg.water_pollution_response)}

        {/* Additional Guidance */}
        {epg.transport_specific_guidance && 
          renderSection('Transport Specific Guidance', epg.transport_specific_guidance)}
        {epg.weather_considerations && 
          renderSection('Weather Considerations', epg.weather_considerations)}

        {/* Emergency Contacts */}
        {renderEmergencyContacts()}

        {/* Regulatory Information */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Regulatory Information</Text>
          <Text style={styles.regulatoryText}>
            Version: {epg.version} • Effective: {new Date(epg.effective_date).toLocaleDateString()}
          </Text>
          <Text style={styles.regulatoryText}>
            Next Review: {new Date(epg.review_date).toLocaleDateString()}
          </Text>
          <Text style={styles.regulatoryText}>
            Country: {epg.country_code}
          </Text>
          {epg.regulatory_references.length > 0 && (
            <Text style={styles.regulatoryText}>
              References: {epg.regulatory_references.join(', ')}
            </Text>
          )}
        </View>

        {epg.is_due_for_review && (
          <View style={styles.warningSection}>
            <Text style={styles.warningText}>
              ⚠️ This EPG is due for review. Please verify current procedures with updated regulations.
            </Text>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F2F2F7',
  },
  scrollView: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#6B7280',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  errorMessage: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#3B82F6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    marginBottom: 8,
  },
  headerTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  epgNumber: {
    fontSize: 16,
    fontWeight: '600',
    color: '#3B82F6',
  },
  shareButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: '#F3F4F6',
    borderRadius: 6,
  },
  shareButtonText: {
    fontSize: 14,
    color: '#4B5563',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 16,
  },
  badges: {
    flexDirection: 'row',
    gap: 8,
    marginBottom: 12,
  },
  severityBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  hazardBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    backgroundColor: '#4B5563',
  },
  badgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
    textTransform: 'uppercase',
  },
  subsidiaryRisks: {
    flexDirection: 'row',
    marginBottom: 12,
  },
  subsidiaryRisksLabel: {
    fontSize: 14,
    color: '#6B7280',
    width: 100,
  },
  subsidiaryRisksValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
    flex: 1,
  },
  emergencyTypes: {
    marginTop: 8,
  },
  emergencyTypesLabel: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 8,
  },
  emergencyTypesContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 6,
  },
  emergencyTypePill: {
    backgroundColor: '#EBF4FF',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
  },
  emergencyTypeText: {
    fontSize: 12,
    color: '#3B82F6',
    fontWeight: '500',
  },
  section: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    marginBottom: 8,
  },
  emergencySection: {
    backgroundColor: '#FEF2F2',
    borderLeftWidth: 4,
    borderLeftColor: '#EF4444',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12,
  },
  emergencySectionTitle: {
    color: '#DC2626',
  },
  sectionContent: {
    fontSize: 16,
    color: '#4B5563',
    lineHeight: 24,
  },
  emergencySectionContent: {
    color: '#1F2937',
    fontWeight: '500',
  },
  distanceItem: {
    marginBottom: 8,
  },
  distanceLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 4,
  },
  distanceValue: {
    fontSize: 14,
    color: '#6B7280',
    marginLeft: 8,
  },
  contactGroup: {
    marginBottom: 16,
  },
  contactCountry: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  contactItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#FEF2F2',
    borderRadius: 6,
    marginBottom: 4,
  },
  contactType: {
    fontSize: 14,
    color: '#4B5563',
  },
  contactNumber: {
    fontSize: 14,
    fontWeight: '600',
    color: '#DC2626',
  },
  regulatoryText: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 4,
  },
  warningSection: {
    backgroundColor: '#FEF3C7',
    padding: 16,
    margin: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#F59E0B',
  },
  warningText: {
    fontSize: 14,
    color: '#92400E',
    textAlign: 'center',
  },
});

export default EPGDetailScreen;