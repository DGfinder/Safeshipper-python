/**
 * Emergency Plan Detail Screen
 * Displays detailed shipment-specific emergency plan information
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  ActivityIndicator,
  TouchableOpacity,
  Alert,
  Share,
  Linking,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRoute, useNavigation } from '@react-navigation/native';

import { apiService } from '../services/apiService';
import { ShipmentEmergencyPlan } from '../types/EPG';
import HazardClassBadge from '../components/HazardClassBadge';

type RouteParams = {
  planId: string;
};

const EmergencyPlanDetailScreen: React.FC = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { planId } = route.params as RouteParams;
  
  const [plan, setPlan] = useState<ShipmentEmergencyPlan | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadPlanDetails();
  }, [planId]);

  const loadPlanDetails = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await apiService.getEmergencyPlan(planId);
      
      if (response.success && response.data) {
        setPlan(response.data);
      } else {
        throw new Error(response.error || 'Failed to load emergency plan details');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to load emergency plan details';
      setError(errorMessage);
      Alert.alert('Error', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleShare = async () => {
    if (!plan) return;
    
    try {
      const shareContent = `Emergency Plan: ${plan.plan_number}\n\nShipment: ${plan.shipment_display}\n\nExecutive Summary:\n${plan.executive_summary}\n\nImmediate Response Actions:\n${plan.immediate_response_actions}\n\nGenerated by SafeShipper`;
      
      await Share.share({
        message: shareContent,
        title: `Emergency Plan ${plan.plan_number}`,
      });
    } catch (error) {
      console.error('Error sharing emergency plan:', error);
    }
  };

  const handleCallContact = (label: string, phoneNumber: string) => {
    Alert.alert(
      `Call ${label}`,
      `Do you want to call ${phoneNumber}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Call', 
          onPress: () => Linking.openURL(`tel:${phoneNumber}`) 
        }
      ]
    );
  };

  const getSeverityColor = (severity: string): string => {
    switch (severity) {
      case 'LOW': return '#10B981';
      case 'MEDIUM': return '#F59E0B';
      case 'HIGH': return '#EF4444';
      case 'CRITICAL': return '#DC2626';
      default: return '#6B7280';
    }
  };

  const renderSection = (title: string, content: string, isEmergency?: boolean) => {
    if (!content || content.trim() === '') return null;
    
    return (
      <View style={[styles.section, isEmergency && styles.emergencySection]}>
        <Text style={[styles.sectionTitle, isEmergency && styles.emergencySectionTitle]}>
          {isEmergency && 'üö® '}{title}
        </Text>
        <Text style={[styles.sectionContent, isEmergency && styles.emergencySectionContent]}>
          {content}
        </Text>
      </View>
    );
  };

  const renderHazardAssessment = () => {
    if (!plan?.hazard_assessment) return null;
    
    const assessment = plan.hazard_assessment;
    
    return (
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üîç Hazard Assessment</Text>
        
        <View style={styles.assessmentOverview}>
          <View style={styles.assessmentRow}>
            <Text style={styles.assessmentLabel}>Overall Severity:</Text>
            <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(assessment.overall_severity) }]}>
              <Text style={styles.severityText}>{assessment.overall_severity}</Text>
            </View>
          </View>
          
          <View style={styles.assessmentRow}>
            <Text style={styles.assessmentLabel}>Dangerous Goods Count:</Text>
            <Text style={styles.assessmentValue}>{assessment.dangerous_goods_count}</Text>
          </View>
        </View>

        <View style={styles.hazardClassesContainer}>
          <Text style={styles.subsectionTitle}>Primary Hazard Classes:</Text>
          <View style={styles.hazardClassesGrid}>
            {assessment.primary_hazard_classes.map((hazardClass, index) => (
              <HazardClassBadge
                key={index}
                hazardClass={hazardClass}
                subsidiaryRisks={assessment.subsidiary_risks}
                size="small"
                style={styles.hazardClassBadge}
              />
            ))}
          </View>
        </View>

        {assessment.dangerous_goods_details.length > 0 && (
          <View style={styles.dgDetailsContainer}>
            <Text style={styles.subsectionTitle}>Dangerous Goods in Shipment:</Text>
            {assessment.dangerous_goods_details.map((dg, index) => (
              <View key={index} style={styles.dgDetailCard}>
                <Text style={styles.dgDetailTitle}>
                  {dg.un_number} - {dg.proper_shipping_name}
                </Text>
                <Text style={styles.dgDetailInfo}>
                  Class {dg.hazard_class}{dg.packing_group && ` ‚Ä¢ PG ${dg.packing_group}`}
                </Text>
              </View>
            ))}
          </View>
        )}

        {assessment.compatibility_assessment && (
          <View style={styles.compatibilityContainer}>
            <Text style={styles.subsectionTitle}>Compatibility Assessment:</Text>
            <View style={[styles.riskBadge, { backgroundColor: getSeverityColor(assessment.compatibility_assessment.risk_level) }]}>
              <Text style={styles.riskText}>Risk Level: {assessment.compatibility_assessment.risk_level}</Text>
            </View>
            {assessment.compatibility_assessment.concerns.length > 0 && (
              <View style={styles.concernsContainer}>
                <Text style={styles.concernsTitle}>Concerns:</Text>
                {assessment.compatibility_assessment.concerns.map((concern, index) => (
                  <Text key={index} style={styles.concernText}>‚Ä¢ {concern}</Text>
                ))}
              </View>
            )}
            {assessment.compatibility_assessment.recommendations.length > 0 && (
              <View style={styles.recommendationsContainer}>
                <Text style={styles.recommendationsTitle}>Recommendations:</Text>
                {assessment.compatibility_assessment.recommendations.map((recommendation, index) => (
                  <Text key={index} style={styles.recommendationText}>‚Ä¢ {recommendation}</Text>
                ))}
              </View>
            )}
          </View>
        )}
      </View>
    );
  };

  const renderEmergencyContacts = () => {
    if (!plan?.route_emergency_contacts) return null;
    
    const contacts = plan.route_emergency_contacts;
    
    return (
      <View style={[styles.section, styles.emergencySection]}>
        <Text style={[styles.sectionTitle, styles.emergencySectionTitle]}>
          üìû Emergency Contacts
        </Text>
        
        {Object.entries(contacts).map(([location, contactInfo]) => (
          <View key={location} style={styles.contactLocationGroup}>
            <Text style={styles.contactLocationTitle}>
              {location.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </Text>
            {Object.entries(contactInfo).map(([type, number]: [string, any]) => (
              <TouchableOpacity
                key={type}
                style={styles.contactItem}
                onPress={() => handleCallContact(
                  type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()), 
                  number
                )}
              >
                <Text style={styles.contactType}>
                  {type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}:
                </Text>
                <Text style={styles.contactNumber}>{number}</Text>
              </TouchableOpacity>
            ))}
          </View>
        ))}
      </View>
    );
  };

  const renderSpecializedProcedures = () => {
    if (!plan?.specialized_procedures || Object.keys(plan.specialized_procedures).length === 0) return null;
    
    return (
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>‚ö° Specialized Emergency Procedures</Text>
        
        {Object.entries(plan.specialized_procedures).map(([type, procedures]) => {
          if (!procedures || procedures.length === 0) return null;
          
          return (
            <View key={type} style={styles.procedureTypeContainer}>
              <Text style={styles.procedureTypeTitle}>
                {type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </Text>
              {procedures.map((procedure, index) => (
                <View key={index} style={styles.procedureCard}>
                  <Text style={styles.procedureApplicable}>
                    Applicable to: {procedure.applicable_to}
                  </Text>
                  <Text style={styles.procedureContent}>
                    {procedure.procedure}
                  </Text>
                </View>
              ))}
            </View>
          );
        })}
      </View>
    );
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#DC2626" />
          <Text style={styles.loadingText}>Loading Emergency Plan...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (error || !plan) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.errorContainer}>
          <Text style={styles.errorTitle}>Unable to Load Emergency Plan</Text>
          <Text style={styles.errorMessage}>{error || 'Emergency plan not found'}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={loadPlanDetails}>
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerTop}>
            <Text style={styles.planNumber}>{plan.plan_number}</Text>
            <TouchableOpacity style={styles.shareButton} onPress={handleShare}>
              <Text style={styles.shareButtonText}>üì§ Share</Text>
            </TouchableOpacity>
          </View>
          
          <Text style={styles.shipmentTitle}>Shipment: {plan.shipment_display}</Text>
          
          <View style={styles.statusContainer}>
            <View style={[styles.statusBadge, { backgroundColor: getSeverityColor(plan.hazard_assessment?.overall_severity || 'MEDIUM') }]}>
              <Text style={styles.statusText}>{plan.status_display}</Text>
            </View>
            <Text style={styles.generatedText}>
              Generated {new Date(plan.generated_at).toLocaleDateString()} by {plan.generated_by_name}
            </Text>
          </View>
        </View>

        {/* Executive Summary */}
        {renderSection('Executive Summary', plan.executive_summary, true)}

        {/* Hazard Assessment */}
        {renderHazardAssessment()}

        {/* Immediate Response Actions */}
        {renderSection('Immediate Response Actions', plan.immediate_response_actions, true)}

        {/* Specialized Procedures */}
        {renderSpecializedProcedures()}

        {/* Emergency Contacts */}
        {renderEmergencyContacts()}

        {/* Special Considerations */}
        {renderSection('Special Considerations', plan.special_considerations)}

        {/* Referenced EPGs */}
        {plan.referenced_epgs_display && plan.referenced_epgs_display.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üìö Referenced Emergency Procedure Guides</Text>
            {plan.referenced_epgs_display.map((epg, index) => (
              <View key={index} style={styles.epgCard}>
                <Text style={styles.epgNumber}>{epg.epg_number}</Text>
                <Text style={styles.epgTitle}>{epg.title}</Text>
              </View>
            ))}
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F2F2F7',
  },
  scrollView: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#6B7280',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  errorMessage: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#DC2626',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    marginBottom: 8,
  },
  headerTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  planNumber: {
    fontSize: 16,
    fontWeight: '600',
    color: '#DC2626',
    fontFamily: 'monospace',
  },
  shareButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: '#F3F4F6',
    borderRadius: 6,
  },
  shareButtonText: {
    fontSize: 14,
    color: '#4B5563',
  },
  shipmentTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 12,
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
    textTransform: 'uppercase',
  },
  generatedText: {
    fontSize: 12,
    color: '#6B7280',
  },
  section: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    marginBottom: 8,
  },
  emergencySection: {
    backgroundColor: '#FEF2F2',
    borderLeftWidth: 4,
    borderLeftColor: '#DC2626',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12,
  },
  emergencySectionTitle: {
    color: '#DC2626',
  },
  sectionContent: {
    fontSize: 16,
    color: '#4B5563',
    lineHeight: 24,
  },
  emergencySectionContent: {
    color: '#1F2937',
    fontWeight: '500',
  },
  subsectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  assessmentOverview: {
    marginBottom: 16,
  },
  assessmentRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  assessmentLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  assessmentValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
  },
  severityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  severityText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  hazardClassesContainer: {
    marginBottom: 16,
  },
  hazardClassesGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  hazardClassBadge: {
    marginBottom: 4,
  },
  dgDetailsContainer: {
    marginBottom: 16,
  },
  dgDetailCard: {
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 6,
    marginBottom: 8,
  },
  dgDetailTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 4,
  },
  dgDetailInfo: {
    fontSize: 12,
    color: '#6B7280',
  },
  compatibilityContainer: {
    marginTop: 16,
  },
  riskBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    marginBottom: 8,
    alignSelf: 'flex-start',
  },
  riskText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  concernsContainer: {
    marginTop: 8,
  },
  concernsTitle: {
    fontSize: 12,
    fontWeight: '600',
    color: '#DC2626',
    marginBottom: 4,
  },
  concernText: {
    fontSize: 12,
    color: '#7F1D1D',
    marginBottom: 2,
  },
  recommendationsContainer: {
    marginTop: 8,
  },
  recommendationsTitle: {
    fontSize: 12,
    fontWeight: '600',
    color: '#059669',
    marginBottom: 4,
  },
  recommendationText: {
    fontSize: 12,
    color: '#065F46',
    marginBottom: 2,
  },
  contactLocationGroup: {
    marginBottom: 16,
  },
  contactLocationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#DC2626',
    marginBottom: 8,
  },
  contactItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#FEF2F2',
    borderRadius: 6,
    marginBottom: 4,
  },
  contactType: {
    fontSize: 14,
    color: '#4B5563',
  },
  contactNumber: {
    fontSize: 14,
    fontWeight: '600',
    color: '#DC2626',
  },
  procedureTypeContainer: {
    marginBottom: 16,
  },
  procedureTypeTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  procedureCard: {
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 6,
    marginBottom: 8,
  },
  procedureApplicable: {
    fontSize: 12,
    fontWeight: '600',
    color: '#6B7280',
    marginBottom: 6,
  },
  procedureContent: {
    fontSize: 14,
    color: '#1F2937',
    lineHeight: 20,
  },
  epgCard: {
    backgroundColor: '#F3F4F6',
    padding: 12,
    borderRadius: 6,
    marginBottom: 8,
  },
  epgNumber: {
    fontSize: 12,
    fontWeight: '600',
    color: '#3B82F6',
    marginBottom: 4,
  },
  epgTitle: {
    fontSize: 14,
    color: '#1F2937',
  },
});

export default EmergencyPlanDetailScreen;